#'   \item{\code{isNumeric((x, objnm = deparse(substitute(x))))}}{Check if x is numeric}}
#' @family sql
#' @include utils.R
sqlConnection <- R6Class(
classname = "SqlConnection",
inherit = NULL,
portable = TRUE,
private = list(
.validator = NULL,
.connection = NULL,
.provider = NULL,
.make.readonly = function(...) {
for (class.attr in list(...)) {
lockBinding(sym = class.attr,  env = self)
}
},
.make.readwrite = function(...) {
for (class.attr in list(...)) {
unlockBinding(sym = class.attr,  env = self)
}
},
.validate = function(...) {
print(length(list(...)))
if (!(missing(connectionstring))) {
#stopifnot(is.character(connectionstring),length(connectionstring) == 1)
} else{
private$.validator$throwError("some error")
}
}
),
# active = list(
#   isconnect = function() {
#     return(FALSE)
#   }
# ),
public = list(
provider = "",
connectionstring = "",
initialize = function(provider, ...) {
private$.validator <- Validator$new(self)
function.pointer <- list(...)
self$provider <- provider
private$.validate(function.pointer)
private$.make.readonly("connectionstring", "provider")
invisible(self$print())
},
#methods
connect = function() {
invisible(self)
},
disconnect = function() {
invisible(self)
},
print = function(...) {
msg <- paste("<", class(self)[1], ">", sep = "")
if (private$.validator$isCharacter(private$.provider)) {
msg <-paste(msg, "> for provider: <", private$.provider, ">", sep = "")
}
cat(msg, " created", "\n", sep = "")
invisible(self)
}
)
)
cnn<-sqlConnection$new(provider = "test","connect","disconnect")
#' Class providing some methods to manage db connection
#'
#' @docType class
#' @importFrom R6 R6Class
#' @keywords connectoion
#' @section Construction:
#' ```
#' sqlConnection$new()
#' ```
#' @return Object of \code{\link{R6Class}} with methods for communication with a database (server)
#' @format \code{\link{R6Class}} object.
#' @examples
#' # cnn<-sqlConnection$new(connectionstring = "myconnectionstring")
#
#' @field
#'
#' @section Methods:
#' \describe{
#'   \item{Documentation}{For full documentation of each method go to https://github.com/ChrisNice89/ORM}
#'   \item{\code{new()}}{This method creates a sqlConnection \code{instance}.}
#'   \item{\code{isString((x, objnm = deparse(substitute(x))))}}{Check if x is numeric}
#'   \item{\code{isNumeric((x, objnm = deparse(substitute(x))))}}{Check if x is numeric}}
#' @family sql
#' @include utils.R
sqlConnection <- R6Class(
classname = "SqlConnection",
inherit = NULL,
portable = TRUE,
private = list(
.validator = NULL,
.connection = NULL,
.provider = NULL,
.make.readonly = function(...) {
for (class.attr in list(...)) {
lockBinding(sym = class.attr,  env = self)
}
},
.make.readwrite = function(...) {
for (class.attr in list(...)) {
unlockBinding(sym = class.attr,  env = self)
}
},
.validate = function(...) {
print(length(list(...)))
if (!(missing(connectionstring))) {
#stopifnot(is.character(connectionstring),length(connectionstring) == 1)
} else{
private$.validator$throwError("some error")
}
}
),
# active = list(
#   isconnect = function() {
#     return(FALSE)
#   }
# ),
public = list(
provider = "",
connectionstring = "",
initialize = function(provider, ...) {
private$.validator <- Validator$new(self)
function.pointer <- list(...)
self$provider <- provider
private$.validate(function.pointer)
private$.make.readonly("connectionstring", "provider")
invisible(self$print())
},
#methods
connect = function() {
invisible(self)
},
disconnect = function() {
invisible(self)
},
print = function(...) {
msg <- paste("<", class(self)[1], ">", sep = "")
if (private$.validator$isCharacter(private$.provider)) {
msg <-paste(msg, "> for provider: <", private$.provider, ">", sep = "")
}
cat(msg, " created", "\n", sep = "")
invisible(self)
}
)
)
cnn<-sqlConnection$new(provider = "test",... = "connect","disconnect")
#' Class providing some methods to manage db connection
#'
#' @docType class
#' @importFrom R6 R6Class
#' @keywords connectoion
#' @section Construction:
#' ```
#' sqlConnection$new()
#' ```
#' @return Object of \code{\link{R6Class}} with methods for communication with a database (server)
#' @format \code{\link{R6Class}} object.
#' @examples
#' # cnn<-sqlConnection$new(connectionstring = "myconnectionstring")
#
#' @field
#'
#' @section Methods:
#' \describe{
#'   \item{Documentation}{For full documentation of each method go to https://github.com/ChrisNice89/ORM}
#'   \item{\code{new()}}{This method creates a sqlConnection \code{instance}.}
#'   \item{\code{isString((x, objnm = deparse(substitute(x))))}}{Check if x is numeric}
#'   \item{\code{isNumeric((x, objnm = deparse(substitute(x))))}}{Check if x is numeric}}
#' @family sql
#' @include utils.R
sqlConnection <- R6Class(
classname = "SqlConnection",
inherit = NULL,
portable = TRUE,
private = list(
.validator = NULL,
.connection = NULL,
.provider = NULL,
.make.readonly = function(...) {
for (class.attr in list(...)) {
lockBinding(sym = class.attr,  env = self)
}
},
.make.readwrite = function(...) {
for (class.attr in list(...)) {
unlockBinding(sym = class.attr,  env = self)
}
},
.validate = function(...) {
print(length(list(...)))
if (!(missing(connectionstring))) {
#stopifnot(is.character(connectionstring),length(connectionstring) == 1)
} else{
private$.validator$throwError("some error")
}
}
),
# active = list(
#   isconnect = function() {
#     return(FALSE)
#   }
# ),
public = list(
provider = "",
connectionstring = "",
initialize = function(provider, ...) {
private$.validator <- Validator$new(self)
print(...)
function.pointer <- list(...)
self$provider <- provider
private$.validate(function.pointer)
private$.make.readonly("connectionstring", "provider")
invisible(self$print())
},
#methods
connect = function() {
invisible(self)
},
disconnect = function() {
invisible(self)
},
print = function(...) {
msg <- paste("<", class(self)[1], ">", sep = "")
if (private$.validator$isCharacter(private$.provider)) {
msg <-paste(msg, "> for provider: <", private$.provider, ">", sep = "")
}
cat(msg, " created", "\n", sep = "")
invisible(self)
}
)
)
cnn<-sqlConnection$new(provider = "test",... = "connect","disconnect")
#' Class providing some methods to manage db connection
#'
#' @docType class
#' @importFrom R6 R6Class
#' @keywords connectoion
#' @section Construction:
#' ```
#' sqlConnection$new()
#' ```
#' @return Object of \code{\link{R6Class}} with methods for communication with a database (server)
#' @format \code{\link{R6Class}} object.
#' @examples
#' # cnn<-sqlConnection$new(connectionstring = "myconnectionstring")
#
#' @field
#'
#' @section Methods:
#' \describe{
#'   \item{Documentation}{For full documentation of each method go to https://github.com/ChrisNice89/ORM}
#'   \item{\code{new()}}{This method creates a sqlConnection \code{instance}.}
#'   \item{\code{isString((x, objnm = deparse(substitute(x))))}}{Check if x is numeric}
#'   \item{\code{isNumeric((x, objnm = deparse(substitute(x))))}}{Check if x is numeric}}
#' @family sql
#' @include utils.R
sqlConnection <- R6Class(
classname = "SqlConnection",
inherit = NULL,
portable = TRUE,
private = list(
.validator = NULL,
.connection = NULL,
.provider = NULL,
.make.readonly = function(...) {
for (class.attr in list(...)) {
lockBinding(sym = class.attr,  env = self)
}
},
.make.readwrite = function(...) {
for (class.attr in list(...)) {
unlockBinding(sym = class.attr,  env = self)
}
},
.validate = function(...) {
print(length(list(...)))
if (!(missing(connectionstring))) {
#stopifnot(is.character(connectionstring),length(connectionstring) == 1)
} else{
private$.validator$throwError("some error")
}
}
),
# active = list(
#   isconnect = function() {
#     return(FALSE)
#   }
# ),
public = list(
provider = "",
connectionstring = "",
initialize = function(provider, ...) {
private$.validator <- Validator$new(self)
print(length(...))
function.pointer <- list(...)
self$provider <- provider
private$.validate(function.pointer)
private$.make.readonly("connectionstring", "provider")
invisible(self$print())
},
#methods
connect = function() {
invisible(self)
},
disconnect = function() {
invisible(self)
},
print = function(...) {
msg <- paste("<", class(self)[1], ">", sep = "")
if (private$.validator$isCharacter(private$.provider)) {
msg <-paste(msg, "> for provider: <", private$.provider, ">", sep = "")
}
cat(msg, " created", "\n", sep = "")
invisible(self)
}
)
)
cnn<-sqlConnection$new(provider = "test",... = "connect","disconnect")
#' Class providing some methods to manage db connection
#'
#' @docType class
#' @importFrom R6 R6Class
#' @keywords connectoion
#' @section Construction:
#' ```
#' sqlConnection$new()
#' ```
#' @return Object of \code{\link{R6Class}} with methods for communication with a database (server)
#' @format \code{\link{R6Class}} object.
#' @examples
#' # cnn<-sqlConnection$new(connectionstring = "myconnectionstring")
#
#' @field
#'
#' @section Methods:
#' \describe{
#'   \item{Documentation}{For full documentation of each method go to https://github.com/ChrisNice89/ORM}
#'   \item{\code{new()}}{This method creates a sqlConnection \code{instance}.}
#'   \item{\code{isString((x, objnm = deparse(substitute(x))))}}{Check if x is numeric}
#'   \item{\code{isNumeric((x, objnm = deparse(substitute(x))))}}{Check if x is numeric}}
#' @family sql
#' @include utils.R
sqlConnection <- R6Class(
classname = "SqlConnection",
inherit = NULL,
portable = TRUE,
private = list(
.validator = NULL,
.connection = NULL,
.provider = NULL,
.make.readonly = function(...) {
for (class.attr in list(...)) {
lockBinding(sym = class.attr,  env = self)
}
},
.make.readwrite = function(...) {
for (class.attr in list(...)) {
unlockBinding(sym = class.attr,  env = self)
}
},
.validate = function(...) {
print(length(list(...)))
if (!(missing(connectionstring))) {
#stopifnot(is.character(connectionstring),length(connectionstring) == 1)
} else{
private$.validator$throwError("some error")
}
}
),
# active = list(
#   isconnect = function() {
#     return(FALSE)
#   }
# ),
public = list(
provider = "",
connectionstring = "",
initialize = function(provider, ...) {
private$.validator <- Validator$new(self)
x<-list(...)
print(length(x))
function.pointer <- list(...)
self$provider <- provider
private$.validate(function.pointer)
private$.make.readonly("connectionstring", "provider")
invisible(self$print())
},
#methods
connect = function() {
invisible(self)
},
disconnect = function() {
invisible(self)
},
print = function(...) {
msg <- paste("<", class(self)[1], ">", sep = "")
if (private$.validator$isCharacter(private$.provider)) {
msg <-paste(msg, "> for provider: <", private$.provider, ">", sep = "")
}
cat(msg, " created", "\n", sep = "")
invisible(self)
}
)
)
cnn<-sqlConnection$new(provider = "test",... = "connect","disconnect")
# roxygen2 dmake documentation
setwd("~/Dev/R/rdao")
library(devtools)
document()
# roxygen2 dmake documentation
setwd("~/Dev/R/rdao")
library(devtools)
document()
remove.packages("rdao")
devtools::install_github("ChrisNice89/rdao",force = TRUE)
library(rdao)
f<-factory()
b<-f$msAccess(path = "mypath_AccessDB")
b$addCredentials(username = "Admin",password = "SesameOpen")
cnn<-b$build()
?RSmisc::getR6Class
get <- function(x = list()) {
class <- R6::R6Class(classname = "class")
lapply(names(x), function(name) {
fn <- eval(substitute(function() subst_name, list(subst_name = name)))
attr(fn, "srcref") <- NULL
class$set("public", name, fn)
})
class
}
x <- get(x = list(a = 10, b = 20))$new()
x$a()
x$a
x$a()
constructor <- function(public = list(), private = list()) {
class <- R6::R6Class(classname = "class")
lapply(names(public), function(name) {
if (is.function(public[[name]])) {
env <- environment(public[[name]])
env$self <- public
env$private <- private
fn <- eval(substitute(function(...) fn(...), list(fn = public[[name]])))
class$set("public", name, fn)
} else {
class$set("public", name, public[[name]])
}
})
class
}
set <- function() {
a <- 10
x <- constructor(public = list(a = function() { a + self$b }, b = 20))$new()
x$a()
}
set()
constructor <- function(public = list(), private = list()) {
class <- R6::R6Class(classname = "class")
lapply(names(public), function(name) {
if (is.function(public[[name]])) {
env <- environment(public[[name]])
env$self <- public
env$private <- private
fn <- eval(substitute(function(...) fn(...), list(fn = public[[name]])))
class$set("public", name, fn)
} else {
class$set("public", name, public[[name]])
}
})
class
}
a <- 10
x <- constructor(public = list(a = function() { a + self$b }, b = 20))$new()
x$a()
View(x)
View(x[["a"]])
View(x[["a"]])
x$b()
x$b
x$b()
View(x)
library(devtools)
use_vignette("Introduction")
devtools::install_githb("hadley/pkgdown")
library(pkgdown)
build_site()
# helper
installer <- function(pkg){
new.pkg <- pkg[!(pkg %in% installed.packages()[, "Package"])]
if (length(new.pkg))
install.packages(new.pkg, dependencies = TRUE)
sapply(pkg, require, character.only = TRUE)
}
packages<- c("devtools", "roxygen2","R6","rmarkdown","pryr")
installer(packages)
rmarkdown::render("vignettes/Framework.Rmd",output_file = "doc/Framework.html")
#create "docs" folder manuel
rmarkdown::render("vignettes/Framework.Rmd",output_file = "docs/Framework.html")
library(pkgdown)
build_site()
#build vignette
#use_vignette("Framework")
rmarkdown::render("vignettes/Framework.Rmd",output_file = "docs/articles/Framework.html")
#build vignette
use_vignette("Framework1")
library(pkgdown)
build_site()
#build vignette
#use_vignette("Framework")
rmarkdown::render("vignettes/Framework.Rmd",output_file = "docs/articles/Framework.html")
