port = 5432){
return(Builder$new(provider = "mySql"))
},
msAccess= function(path,dbpassword=""){
b<-Builder$new(provider = "msAccess")
b$path <- path
return(b)
},
dbFile=function(path){
b<-Builder$new(provider = "dbFile")
b$path <- path
return(b)
},
oracle= function(path,dbpassword=""){
return(Builder$new("oracle",path = path))
},
msSql=function(path,dbpassword=""){
return(Builder$new("msSql",path = path))
},
print=function() {
msg<-paste("<",class(self)[1],">",sep = "")
cat(msg," created", "\n", sep = "")
invisible(self)
}
)
)
#' Builder liefert die Bausteine zum erstellen einer Datenbankverbindung
#'
#'
#' @docType class
#' @importFrom R6 R6Class
#' @keywords data
#' @family sql
#'
#' @section Construction:
#' ```
#' xxxxxxxxxxxxxxxxxxxxxx
#' ```
#'
#' @return Object of \code{\link{R6Class}} xxxxxxxxxxxxxxxxxxxx (x)
#' @format \code{\link{R6Class}} object.
#' @examples
#' xxxxxxxxxxxxxxxxxxxxxx
#'
#'
#' @field x blabla.
#' @field y blabla.
#'
#' @section Methods:
#' \describe{
#'   \item{Documentation}{For full documentation of each method go to https://github.com/ChrisNice89/rdao}
#'   \item{\code{new()}}{xxx \code{Factory}.}
#'   \item{\code{xx(yy,yy="")}}{xx \code{zz}.}
#'   \item{\code{zz(yy,yy="")}}{xx \code{zz}.}}
#'
#' @include utils.R
#' @include credentials.R
#' @include sqlConnection.R
Builder <- R6::R6Class(
classname = "Builder",
inherit = NULL,
portable = TRUE,
# parent_env   = asNamespace("rdao"),
cloneable    = FALSE,
private = list(.validator = NULL,
.dbpassword = ""),
public = list(
builderProvider = "",
driver = "",
path = "",
dsn = "",
database = "",
server = "",
host = "",
port = 0,
credentials = NULL,
initialize = function(provider) {
private$.validator <- Validator$new(self)
self$builderProvider <- provider
private$.validator$makeReadonly("builderProvider")
invisible(self$print())
},
addCredentials = function(username = "",
password = "") {
private$.validator$makeReadwrite("credentials")
self$credentials <-Credentials$new(username = username, password = password)
private$.validator$makeReadonly("credentials")
invisible(self)
},
#actual implementation
build = function() {
prc <- "build()"
if (!private$.validator$isNullString(self$path)) {
if (!file.exists(self$path)) {
msg <- paste("UngÃ¼ltiger Pfad", self$path)
private$.validator$throwError(msg, prc)
}
}
switch(
self$builderProvider,
msAccess = {
dbq <- paste0("DBQ=", self$path)
driver <-
"Driver={Microsoft Access Driver (*.mdb, *.accdb)};"
dbiDriver <- odbc::odbc
connectionstring <- paste0(driver, dbq)
return (msAccessConnection$new(provider = self$builderProvider,dbiDriver,connectionstring))
},
dbFile = {
dbiDriver <- RSQLite::SQLite
return (dbFileConnection$new(provider = self$builderProvider, dbiDriver,self$path))
},
dataFrame = {
dbiDriver <- RSQLite::SQLite
return (sqliteConnection$new(provider = self$builderProvider, ":memory:",dbiDriver))
},
mySql = {
msg <- paste("Noch nicht implementiert:", self$builderProvider)
private$.validator$throwError(msg, prc)
},
msSql = {
msg <- paste("Noch nicht implementiert:", self$builderProvider)
private$.validator$throwError(msg, prc)
},
{
msg <-
msg <- paste("Noch nicht implementiert:", self$builderProvider)
private$.validator$throwError(msg, prc)
}
)
},
print = function() {
msg <- paste("<", class(self)[1], ">", sep = "")
if (private$.validator$isCharacter(self$builderProvider) ) {
msg <-
paste(msg, " for provider: <", self$builderProvider, ">", sep = "")
}
cat(msg, " created", "\n", sep = "")
invisible(self)
}
)
)
#library(rdao)
f<-connectionFactory()
b<-f$dbFile("/Users/cnitz/Dev/R/rdao/db files external/Diamonds.db")
cnn<-b$build()
result<-cnn$createQuery(sql = "Select carat,color FROM diamonds LIMIT 10")$fetch()
result$countRows()
result$getRecord(c(1,2))
View(result)
View(result[["getRecords"]])
View(result[["getRecords"]])
#' Abstrakte Klasse implementiert Interface
#'
#'
#' @docType class
#' @importFrom R6 R6Class
#' @keywords data
#' @family sql
#'
#' @section Construction:
#' ```
#' xxxxxxxxxxxxxxxxxxxxxx
#' ```
#'
#' @return Object of \code{\link{R6Class}} xxxxxxxxxxxxxxxxxxxx (x)
#' @format \code{\link{R6Class}} object.
#' @examples
#' xxxxxxxxxxxxxxxxxxxxxx
#'
#'
#' @field x blabla.
#' @field y blabla.
#'
#' @section Methods:
#' \describe{
#'   \item{Documentation}{For full documentation of each method go to https://github.com/ChrisNice89/rdao}
#'   \item{\code{new()}}{xxx \code{Factory}.}
#'   \item{\code{xx(yy,yy="")}}{xx \code{zz}.}
#'   \item{\code{zz(yy,yy="")}}{xx \code{zz}.}}
#'
#' @include utils.R
#'
sqlInterface <- R6::R6Class(
classname = "Abstarkt SqlResult Interface",
inherit = NULL,
portable = TRUE,
public = list(
initialize = function() {
}
),
private = list(
remove=function(fields){
print("remove")
for (c in tools::toTitleCase(fields)) {
mthd_name <- c
mthd_set <-
glue::glue("generics$public_methods$set{mthd_name}<-NULL")
mthd_get <-
glue::glue("generics$public_methods$get{mthd_name}<-NULL")
eval(parse(text = mthd_get))
eval(parse(text = mthd_set))
}
},
createSqlResult = function(connection,dataframe) {
if (!private$.validator$isTrustedConnection(connection)) {
if (!is.data.frame(dataframe)) {
}
}
fields<-colnames(dataframe)
obj<-generics
obj$set("private", "access", function() private$e, overwrite = TRUE)
obj$set("private", "e", new.env(), overwrite = TRUE)
obj$set("private", "index", NULL, overwrite = TRUE)
obj$set("public", "initialize", function(df) {
private$e$df<-df
private$index <- 1
invisible(self)
}, overwrite = TRUE)
obj$set("public", "print", function()
private$shared$df[private$index,], overwrite = TRUE)
#Create setter und getter
for (c in fields) {
mthd_name <- c
mthd_set <-
glue::glue("function(value) private$e$df[private$index,]${mthd_name} <-value")
mthd_get <-
glue::glue("function() private$e$df[private$index,]${mthd_name}")
mthd_name <- tools::toTitleCase(c)
obj$set("public",
paste("get", mthd_name, sep = ""),
eval(parse(text = mthd_get)),
overwrite = TRUE)
obj$set("public",
paste("set", mthd_name, sep = ""),
eval(parse(text = mthd_set)),
overwrite = TRUE)
}
result<-sqlResult$new(connection ,dataframe)
on.exit(private$remove(fields))
return(result)
}
)
)
generics <- R6::R6Class(
classname = "Generics",
inherit =NULL,
portable = TRUE,
private = list(),
public = list(
initialize = function(){
}
)
)
#library(rdao)
f<-connectionFactory()
b<-f$dbFile("/Users/cnitz/Dev/R/rdao/db files external/Diamonds.db")
cnn<-b$build()
result<-cnn$createQuery(sql = "Select carat,color FROM diamonds LIMIT 10")$fetch()
result$countRows()
result$getRecord(c(1,2))
result$print()
devtools::install_github("Chrisnice89/rdao")
library(rdao)
library(roxygen2)
setwd("~/Dev/R/rdao")
document()
# helper
installer <- function(pkg){
new.pkg <- pkg[!(pkg %in% installed.packages()[, "Package"])]
if (length(new.pkg))
install.packages(new.pkg, dependencies = TRUE)
sapply(pkg, require, character.only = TRUE)
}
packages<- c("devtools", "roxygen2","R6","rmarkdown","pryr","DBI")
installer(packages)
library(roxygen2)
setwd("~/Dev/R/rdao")
document()
devtools::install_github("Chrisnice89/rdao")
library(rdao)
# Abfrage erstellen
f<-connectionFactory()
b<-f$dbFile("/Users/cnitz/Dev/R/rdao/db files external/Diamonds.db")
cnn<-b$build()
result<-cnn$createQuery(sql = "Select carat,color FROM diamonds LIMIT 10")$fetch()
result$countRows()
result$getRecords(c(1,2))
result$setCarat(0.66)
result$row(index = 2)$setCarat(0.99)
result$getRecord(c(1,2))
result$delete(rows = c(1,2))
result$delete(rows = c(1,2))
result$row(index = 2)$setCarat(0.99)
result$setCarat(0.66)
result$getRecords(c(1,2))
result$countRows()
result$getRecords(c(1,2))
result$setCarat(0.66)
result$row(index = 2)$setCarat(0.99)
result$getRecord(c(1,2))
result$delete(rows = c(1,2))
#' Abstrakte Klasse implementiert Interface
#'
#'
#' @docType class
#' @importFrom R6 R6Class
#' @keywords data
#' @family sql
#'
#' @section Construction:
#' ```
#' xxxxxxxxxxxxxxxxxxxxxx
#' ```
#'
#' @return Object of \code{\link{R6Class}} xxxxxxxxxxxxxxxxxxxx (x)
#' @format \code{\link{R6Class}} object.
#' @examples
#' xxxxxxxxxxxxxxxxxxxxxx
#'
#'
#' @field x blabla.
#' @field y blabla.
#'
#' @section Methods:
#' \describe{
#'   \item{Documentation}{For full documentation of each method go to https://github.com/ChrisNice89/rdao}
#'   \item{\code{new()}}{xxx \code{Factory}.}
#'   \item{\code{xx(yy,yy="")}}{xx \code{zz}.}
#'   \item{\code{zz(yy,yy="")}}{xx \code{zz}.}}
#'
#' @include utils.R
#' @include sqlResult.R
sqlInterface <- R6::R6Class(
classname = "Abstarkt SqlResult Interface",
inherit = NULL,
portable = TRUE,
public = list(
initialize = function() {
}
),
private = list(
remove=function(fields){
for (c in tools::toTitleCase(fields)) {
mthd_name <- c
mthd_set <-
glue::glue("generics$public_methods$set{mthd_name}<-NULL")
mthd_get <-
glue::glue("generics$public_methods$get{mthd_name}<-NULL")
eval(parse(text = mthd_get))
eval(parse(text = mthd_set))
}
},
sqlResult = function(connection,dataframe) {
if (!private$.validator$isTrustedConnection(connection)) {
if (!is.data.frame(dataframe)) {
}
}
fields<-colnames(dataframe)
obj<-generics
obj$set("private", "access", function() private$e, overwrite = TRUE)
obj$set("private", "e", new.env(), overwrite = TRUE)
obj$set("private", "index", NULL, overwrite = TRUE)
obj$set("private", "setIndex", function(i) private$index <- i, overwrite = TRUE)
obj$set("public", "initialize", function(df) {
private$e$df<-df
private$index <- 1
invisible(self)
}, overwrite = TRUE)
obj$set("public", "print", function()
private$e$df[private$index,], overwrite = TRUE)
for (c in fields) {
mthd_name <- c
mthd_set <-
glue::glue("function(value) private$e$df[private$index,]${mthd_name} <-value")
mthd_get <-
glue::glue("function() private$e$df[private$index,]${mthd_name}")
mthd_name <- tools::toTitleCase(c)
obj$set("public",
paste("get", mthd_name, sep = ""),
eval(parse(text = mthd_get)),
overwrite = TRUE)
obj$set("public",
paste("set", mthd_name, sep = ""),
eval(parse(text = mthd_set)),
overwrite = TRUE)
}
on.exit(private$remove(fields))
return(sqlResult$new(connection ,dataframe))
}
)
)
generics <- R6::R6Class(
classname = "Generics",
inherit =NULL,
portable = TRUE,
private = list(),
public = list(
initialize = function(){
}
)
)
devtools::install_github("Chrisnice89/rdao")
library(rdao)
devtools::install_github("Chrisnice89/rdao")
library(rdao)
result
result
View(result)
View(result)
#' Abstrakte Klasse implementiert Interface
#'
#'
#' @docType class
#' @importFrom R6 R6Class
#' @keywords data
#' @family sql
#'
#' @section Construction:
#' ```
#' xxxxxxxxxxxxxxxxxxxxxx
#' ```
#'
#' @return Object of \code{\link{R6Class}} xxxxxxxxxxxxxxxxxxxx (x)
#' @format \code{\link{R6Class}} object.
#' @examples
#' xxxxxxxxxxxxxxxxxxxxxx
#'
#'
#' @field x blabla.
#' @field y blabla.
#'
#' @section Methods:
#' \describe{
#'   \item{Documentation}{For full documentation of each method go to https://github.com/ChrisNice89/rdao}
#'   \item{\code{new()}}{xxx \code{Factory}.}
#'   \item{\code{xx(yy,yy="")}}{xx \code{zz}.}
#'   \item{\code{zz(yy,yy="")}}{xx \code{zz}.}}
#'
#' @include utils.R
#' @include sqlResult.R
sqlInterface <- R6::R6Class(
classname = "Abstarkt SqlResult Interface",
inherit = NULL,
portable = TRUE,
public = list(
initialize = function() {
}
),
private = list(
remove=function(fields){
for (c in tools::toTitleCase(fields)) {
mthd_name <- c
mthd_set <-
glue::glue("generics$public_methods$set{mthd_name}<-NULL")
mthd_get <-
glue::glue("generics$public_methods$get{mthd_name}<-NULL")
eval(parse(text = mthd_get))
eval(parse(text = mthd_set))
}
},
sqlResult = function(connection,dataframe) {
if (!private$.validator$isTrustedConnection(connection)) {
if (!is.data.frame(dataframe)) {
}
}
fields<-colnames(dataframe)
obj<-generics
obj$set("private", "access", function() private$e, overwrite = TRUE)
obj$set("private", "e", new.env(), overwrite = TRUE)
obj$set("private", "index", NULL, overwrite = TRUE)
obj$set("private", "setIndex", function(i) private$index <- i, overwrite = TRUE)
obj$set("public", "initialize", function(df) {
private$e$df<-df
private$index <- 1
invisible(self)
}, overwrite = TRUE)
# obj$set("public", "print", function()
#   private$e$df[private$index,], overwrite = TRUE)
for (c in fields) {
mthd_name <- c
mthd_set <-
glue::glue("function(value) private$e$df[private$index,]${mthd_name} <-value")
mthd_get <-
glue::glue("function() private$e$df[private$index,]${mthd_name}")
mthd_name <- tools::toTitleCase(c)
obj$set("public",
paste("get", mthd_name, sep = ""),
eval(parse(text = mthd_get)),
overwrite = TRUE)
obj$set("public",
paste("set", mthd_name, sep = ""),
eval(parse(text = mthd_set)),
overwrite = TRUE)
}
on.exit(private$remove(fields))
return(sqlResult$new(connection ,dataframe))
}
)
)
generics <- R6::R6Class(
classname = "Generics",
inherit =NULL,
portable = TRUE,
private = list(),
public = list(
initialize = function(){
}
)
)
devtools::install_github("Chrisnice89/rdao")
library(rdao)
