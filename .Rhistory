}
)
)
#' SqlFactory liefert mehoden zum erstellen eines builders (Entwurfsmuster)
#'
#'
#' @docType class
#' @importFrom R6 R6Class
#' @keywords data
#' @family sql
#'
#' @section Construction:
#' ```
#' xxxxxxxxxxxxxxxxxxxxxx
#' ```
#'
#' @return Object of \code{\link{R6Class}} xxxxxxxxxxxxxxxxxxxx (x)
#' @format \code{\link{R6Class}} object.
#' @examples
#' xxxxxxxxxxxxxxxxxxxxxx
#'
#'
#' @field x blabla.
#' @field y blabla.
#'
#' @section Methods:
#' \describe{
#'   \item{Documentation}{For full documentation of each method go to https://github.com/ChrisNice89/rdao}
#'   \item{\code{new()}}{xxx \code{Factory}.}
#'   \item{\code{xx(yy,yy="")}}{xx \code{zz}.}
#'   \item{\code{zz(yy,yy="")}}{xx \code{zz}.}}
#'
#' @include utils.R
#' @include builder.R
#' @export
connectionFactory<-function(){
return (sqlFactory$new())
}
sqlFactory <- R6::R6Class(
classname = "SqlFactory",
inherit = NULL,
portable = TRUE,
private = list(
.validator = NULL
),
#constructor's
public = list(
initialize = function()
{
private$.validator<-Validator$new(self)
invisible(self$print())
},
mySql= function(database="testDB",
uid = "mysql",
pwd = "password",
host = "localhost",
port = 5432){
return(Builder$new(provider = "mySql"))
},
msAccess= function(path,dbpassword=""){
b<-Builder$new(provider = "msAccess")
b$path <- path
return(b)
},
dbFile=function(path){
b<-Builder$new(provider = "dbFile")
b$path <- path
return(b)
},
oracle= function(path,dbpassword=""){
return(Builder$new("oracle",path = path))
},
msSql=function(path,dbpassword=""){
return(Builder$new("msSql",path = path))
},
print=function() {
msg<-paste("<",class(self)[1],">",sep = "")
cat(msg," created", "\n", sep = "")
invisible(self)
}
)
)
#' Builder liefert die Bausteine zum erstellen einer Datenbankverbindung
#'
#'
#' @docType class
#' @importFrom R6 R6Class
#' @keywords data
#' @family sql
#'
#' @section Construction:
#' ```
#' xxxxxxxxxxxxxxxxxxxxxx
#' ```
#'
#' @return Object of \code{\link{R6Class}} xxxxxxxxxxxxxxxxxxxx (x)
#' @format \code{\link{R6Class}} object.
#' @examples
#' xxxxxxxxxxxxxxxxxxxxxx
#'
#'
#' @field x blabla.
#' @field y blabla.
#'
#' @section Methods:
#' \describe{
#'   \item{Documentation}{For full documentation of each method go to https://github.com/ChrisNice89/rdao}
#'   \item{\code{new()}}{xxx \code{Factory}.}
#'   \item{\code{xx(yy,yy="")}}{xx \code{zz}.}
#'   \item{\code{zz(yy,yy="")}}{xx \code{zz}.}}
#'
#' @include utils.R
#' @include credentials.R
#' @include sqlConnection.R
Builder <- R6::R6Class(
classname = "Builder",
inherit = NULL,
portable = TRUE,
# parent_env   = asNamespace("rdao"),
cloneable    = FALSE,
private = list(.validator = NULL,
.dbpassword = ""),
public = list(
builderProvider = "",
driver = "",
path = "",
dsn = "",
database = "",
server = "",
host = "",
port = 0,
credentials = NULL,
initialize = function(provider) {
private$.validator <- Validator$new(self)
self$builderProvider <- provider
private$.validator$makeReadonly("builderProvider")
invisible(self$print())
},
addCredentials = function(username = "",
password = "") {
private$.validator$makeReadwrite("credentials")
self$credentials <-Credentials$new(username = username, password = password)
private$.validator$makeReadonly("credentials")
invisible(self)
},
#actual implementation
build = function() {
prc <- "build()"
if (!private$.validator$isNullString(self$path)) {
if (!file.exists(self$path)) {
msg <- paste("Ungültiger Pfad", self$path)
private$.validator$throwError(msg, prc)
}
}
switch(
self$builderProvider,
msAccess = {
dbq <- paste0("DBQ=", self$path)
driver <-
"Driver={Microsoft Access Driver (*.mdb, *.accdb)};"
dbiDriver <- odbc::odbc
connectionstring <- paste0(driver, dbq)
return (msAccessConnection$new(provider = self$builderProvider,dbiDriver,connectionstring))
},
dbFile = {
dbiDriver <- RSQLite::SQLite
return (dbFileConnection$new(provider = self$builderProvider, dbiDriver,self$path))
},
dataFrame = {
dbiDriver <- RSQLite::SQLite
return (sqliteConnection$new(provider = self$builderProvider, ":memory:",dbiDriver))
},
mySql = {
msg <- paste("Noch nicht implementiert:", self$builderProvider)
private$.validator$throwError(msg, prc)
},
msSql = {
msg <- paste("Noch nicht implementiert:", self$builderProvider)
private$.validator$throwError(msg, prc)
},
{
msg <-
msg <- paste("Noch nicht implementiert:", self$builderProvider)
private$.validator$throwError(msg, prc)
}
)
},
print = function() {
msg <- paste("<", class(self)[1], ">", sep = "")
if (private$.validator$isCharacter(self$builderProvider) ) {
msg <-
paste(msg, " for provider: <", self$builderProvider, ">", sep = "")
}
cat(msg, " created", "\n", sep = "")
invisible(self)
}
)
)
remove.packages("rdao")
f<-connectionFactory()
b<-f$dbFile("/Users/cnitz/Dev/R/rdao/db files external/Diamonds.db")
cnn<-b$build()
cmd<-cnn$createQuery(sql = "Select * FROM diamonds")
result<-cmd$fetch()
result$override()
d<-result$get(1)
#' Aktuell wrapper um ein Dataframe aus einer Sql Abfrage
#' Könnte in der Zukunft um CRUD-Funktionalitäten erweitert werden.
#' Dataframe sollte komplett gekapselt werden um zb "AddColumn" zu verhindern.
#'
#'
#' @docType class
#' @importFrom R6 R6Class
#' @keywords data
#' @family sql
#'
#' @section Construction:
#' ```
#' xxxxxxxxxxxxxxxxxxxxxx
#' ```
#'
#' @return Object of \code{\link{R6Class}} xxxxxxxxxxxxxxxxxxxx (x)
#' @format \code{\link{R6Class}} object.
#' @examples
#' xxxxxxxxxxxxxxxxxxxxxx
#'
#'
#' @field x blabla.
#' @field y blabla.
#'
#' @section Methods:
#' \describe{
#'   \item{Documentation}{For full documentation of each method go to https://github.com/ChrisNice89/rdao}
#'   \item{\code{new()}}{xxx \code{Factory}.}
#'   \item{\code{xx(yy,yy="")}}{xx \code{zz}.}
#'   \item{\code{zz(yy,yy="")}}{xx \code{zz}.}}
#'
#' @include utils.R
#' @include sqlInterface.R
sqlResult <- R6::R6Class(
classname = "SqlResult",
inherit = sqlInterface,
portable = TRUE,
private = list(
.validator = NULL,
.df=NULL,
.connection=NULL,
.generics=NULL
),
public = list(
data = NULL,
rows=function(){nrow(self$data)},
columns=NULL,
initialize = function(connection, data) {
private$.validator <- Validator$new(self)
if (private$.validator$isTrustedConnection(connection)) {
if (is.data.frame(data)) {
private$.df <- data
private$.connection <- connection
}else {
private$.validator$throwWarning("Kein Dataframe","initialize()")
}
}else{
private$.validator$throwError("Keine gültige Verbindung","initialize()")
}
self$data<-private$.df
print(colnames(private$.df))
super$initialize(colnames(private$.df))
self$loadGenerics()
private$.validator$makeReadonly("data")
},
loadGeneric=function(){
entities<-list()
f<-super$implement()
for(r in 1:nrow(private$.df)){
entities[[r]]<-f$new(index=r)
}
super$remove()
private$.generics<-entities
},
getRecord=function(i){
return(private$.generics[[i]])
},
test=function(i){
message(paste(private$.generics[[i]]$getRecord(),collapse = " "))
message(paste(private$.df[i,],collapse = " "))
}
)
)
f<-connectionFactory()
b<-f$dbFile("/Users/cnitz/Dev/R/rdao/db files external/Diamonds.db")
cnn<-b$build()
cmd<-cnn$createQuery(sql = "Select * FROM diamonds")
result<-cmd$fetch()
result$override()
d<-result$get(1)
#' Abstrakte Klasse implementiert Interface
#'
#'
#' @docType class
#' @importFrom R6 R6Class
#' @keywords data
#' @family sql
#'
#' @section Construction:
#' ```
#' xxxxxxxxxxxxxxxxxxxxxx
#' ```
#'
#' @return Object of \code{\link{R6Class}} xxxxxxxxxxxxxxxxxxxx (x)
#' @format \code{\link{R6Class}} object.
#' @examples
#' xxxxxxxxxxxxxxxxxxxxxx
#'
#'
#' @field x blabla.
#' @field y blabla.
#'
#' @section Methods:
#' \describe{
#'   \item{Documentation}{For full documentation of each method go to https://github.com/ChrisNice89/rdao}
#'   \item{\code{new()}}{xxx \code{Factory}.}
#'   \item{\code{xx(yy,yy="")}}{xx \code{zz}.}
#'   \item{\code{zz(yy,yy="")}}{xx \code{zz}.}}
#'
#' @include utils.R
#'
sqlInterface <- R6::R6Class(
classname = "Abstarkt SqlResult Interface",
inherit = NULL,
portable = TRUE,
public = list(
initialize = function(fields) {
print(fields)
private$.fields<-fields
}
),
private = list(
.fields=NULL,
implement = function() {
fields<-private$.fields
obj<-generics
obj$set("private", "shared", new.env(), overwrite = TRUE)
#obj$set("private", ".df", NULL, overwrite = TRUE)
obj$set("public", "index", NULL, overwrite = TRUE)
obj$set("public", "initialize", function(index,df) {
private$shared$df<-df
self$index <- index
invisible(self)
}, overwrite = TRUE)
obj$set("public", "getRecord", function()
private$shared$df[self$index,], overwrite = TRUE)
print(class(obj))
#Create setter und getter
for (c in fields) {
mthd_name <- c
mthd_set <-
glue::glue("function(x) private$shared$df[self$index,]${mthd_name} <-x")
mthd_get <-
glue::glue("function() private$shared$df[self$index,]${mthd_name}")
mthd_name <- tools::toTitleCase(c)
obj$set("public",
paste("get", mthd_name, sep = ""),
eval(parse(text = mthd_get)),
overwrite = TRUE)
obj$set("public",
paste("set", mthd_name, sep = ""),
eval(parse(text = mthd_set)),
overwrite = TRUE)
}
return(obj)
},
remove=function(){
fields<-private$.fields
for (c in tools::toTitleCase(fields)) {
mthd_name <- c
mthd_set <-
glue::glue("generics$public_methods$set{mthd_name}<-NULL")
mthd_get <-
glue::glue("generics$public_methods$get{mthd_name}<-NULL")
eval(parse(text = mthd_get))
eval(parse(text = mthd_set))
}
}
)
)
generics <- R6::R6Class(
classname = "Generics",
inherit =NULL,
portable = TRUE,
private = list(),
public = list(
initialize = function(){
}
)
)
f<-connectionFactory()
b<-f$dbFile("/Users/cnitz/Dev/R/rdao/db files external/Diamonds.db")
cnn<-b$build()
cmd<-cnn$createQuery(sql = "Select * FROM diamonds")
result<-cmd$fetch()
result$override()
d<-result$get(1)
#' Aktuell wrapper um ein Dataframe aus einer Sql Abfrage
#' Könnte in der Zukunft um CRUD-Funktionalitäten erweitert werden.
#' Dataframe sollte komplett gekapselt werden um zb "AddColumn" zu verhindern.
#'
#'
#' @docType class
#' @importFrom R6 R6Class
#' @keywords data
#' @family sql
#'
#' @section Construction:
#' ```
#' xxxxxxxxxxxxxxxxxxxxxx
#' ```
#'
#' @return Object of \code{\link{R6Class}} xxxxxxxxxxxxxxxxxxxx (x)
#' @format \code{\link{R6Class}} object.
#' @examples
#' xxxxxxxxxxxxxxxxxxxxxx
#'
#'
#' @field x blabla.
#' @field y blabla.
#'
#' @section Methods:
#' \describe{
#'   \item{Documentation}{For full documentation of each method go to https://github.com/ChrisNice89/rdao}
#'   \item{\code{new()}}{xxx \code{Factory}.}
#'   \item{\code{xx(yy,yy="")}}{xx \code{zz}.}
#'   \item{\code{zz(yy,yy="")}}{xx \code{zz}.}}
#'
#' @include utils.R
#' @include sqlInterface.R
sqlResult <- R6::R6Class(
classname = "SqlResult",
inherit = sqlInterface,
portable = TRUE,
private = list(
.validator = NULL,
.df=NULL,
.connection=NULL,
.generics=NULL
),
public = list(
data = NULL,
rows=function(){nrow(self$data)},
columns=NULL,
initialize = function(connection, data) {
private$.validator <- Validator$new(self)
if (private$.validator$isTrustedConnection(connection)) {
if (is.data.frame(data)) {
private$.df <- data
private$.connection <- connection
}else {
private$.validator$throwWarning("Kein Dataframe","initialize()")
}
}else{
private$.validator$throwError("Keine gültige Verbindung","initialize()")
}
self$data<-private$.df
super$initialize(colnames(private$.df))
self$loadGenerics()
private$.validator$makeReadonly("data")
},
loadGenerics=function(){
entities<-list()
f<-super$implement()
for(r in 1:nrow(private$.df)){
entities[[r]]<-f$new(index=r)
}
super$remove()
private$.generics<-entities
},
getRecord=function(i){
return(private$.generics[[i]])
},
test=function(i){
message(paste(private$.generics[[i]]$getRecord(),collapse = " "))
message(paste(private$.df[i,],collapse = " "))
}
)
)
remove.packages("rdao")
devtools::install_github("Chrisnice89/rdao")
library(rdao)
f<-connectionFactory()
b<-f$dbFile("/Users/cnitz/Dev/R/rdao/db files external/Diamonds.db")
cnn<-b$build()
cmd<-cnn$createQuery(sql = "Select * FROM diamonds")
result<-cmd$fetch()
library(roxygen2)
setwd("~/Dev/R/rdao")
document()
remove.packages("rdao")
devtools::install_github("Chrisnice89/rdao")
library(rdao)
f<-connectionFactory()
b<-f$dbFile("/Users/cnitz/Dev/R/rdao/db files external/Diamonds.db")
cnn<-b$build()
cmd<-cnn$createQuery(sql = "Select * FROM diamonds")
result<-cmd$fetch()
remove.packages("rdao")
devtools::install_github("Chrisnice89/rdao")
library(rdao)
f<-connectionFactory()
b<-f$dbFile("/Users/cnitz/Dev/R/rdao/db files external/Diamonds.db")
cnn<-b$build()
cmd<-cnn$createQuery(sql = "Select * FROM diamonds")
result<-cmd$fetch()
