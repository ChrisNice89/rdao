}
`[[.functor` <- `$.functor`
`[[<-.functor` <- `$<-.functor`
#library(rdao)
f<-connectionFactory()
b<-f$dbFile("/Users/cnitz/Dev/R/rdao/db files external/Diamonds.db")
cnn<-b$build()
result<-cnn$createQuery(sql = "Select carat,color FROM diamonds LIMIT 10")$fetch()
result$countRows()
result$update()
#' Aktuell wrapper um ein Dataframe aus einer Sql Abfrage
#' Könnte in der Zukunft um CRUD-Funktionalitäten erweitert werden.
#' Dataframe sollte komplett gekapselt werden um zb "AddColumn" zu verhindern.
#'
#'
#' @docType class
#' @importFrom R6 R6Class
#' @keywords data
#' @family sql
#'
#' @section Construction:
#' ```
#' xxxxxxxxxxxxxxxxxxxxxx
#' ```
#'
#' @return Object of \code{\link{R6Class}} xxxxxxxxxxxxxxxxxxxx (x)
#' @format \code{\link{R6Class}} object.
#' @examples
#' xxxxxxxxxxxxxxxxxxxxxx
#'
#'
#' @field x blabla.
#' @field y blabla.
#'
#' @section Methods:
#' \describe{
#'   \item{Documentation}{For full documentation of each method go to https://github.com/ChrisNice89/rdao}
#'   \item{\code{new()}}{xxx \code{Factory}.}
#'   \item{\code{xx(yy,yy="")}}{xx \code{zz}.}
#'   \item{\code{zz(yy,yy="")}}{xx \code{zz}.}}
#'
#' @include utils.R
#' @include sqlInterface.R
sqlResult<- R6::R6Class(
classname = "SqlResult",
inherit = generics,
portable = TRUE,
private = list(
.validator = NULL,
.connection=NULL,
.eod=FALSE,
.shared=NULL
),
public = list(
initialize = function(connection, data) {
private$.validator <- Validator$new(self)
if (private$.validator$isTrustedConnection(connection)) {
if (is.data.frame(data)) {
super$initialize(data)
private$.shared<-super$getPointer()
private$.connection <- connection
}else {
private$.validator$throwWarning("Kein Dataframe","initialize()")
}
}else{
private$.validator$throwError("Keine gültige Verbindung","initialize()")
}
},
getRecords=function(){
i<-private$.shared$index
return(private$.shared$df[i,])
},
countRows=function(){
return(nrow(private$.shared$df))
},
countColumns=function(){
return(ncol(private$.shared$df))
},
read=function(){
i<-private$.shared$index
on.exit(self$row(i+1))
return(!private$.eod)
},
row=function(i){
if(i>self$countRows()){
private$.eod<-TRUE
private$.shared$index<-1
}else{
private$.eod<-FALSE
private$.shared$index<-i
}
invisible(self)
},
toMatrix=function(){
functor <- function(obj) {
structure(
function(i=NA,j=NA) {
obj$matrixAccess(i,j)
},
class = "functor",
obj = obj
)
}
return(functor(super))
},
update=function(){
querys<-list()
for(i in 1:nrow(private$.shared$df)) {
print(i)
querys[[i]]<-sqlUpdateQuery$new(private$.connection,table = "diamonds",id = 1,c("a","b"),c(1,2))
print(querys[[i]]$sql)
}
},
delete=function(rows){
private$.shared$df <- super$getPointer()$df[-rows, ]
invisible(self)
},
add=function(){
}
)
)
#library(rdao)
f<-connectionFactory()
b<-f$dbFile("/Users/cnitz/Dev/R/rdao/db files external/Diamonds.db")
cnn<-b$build()
result<-cnn$createQuery(sql = "Select carat,color FROM diamonds LIMIT 10")$fetch()
result$countRows()
result$update()
#' Aktuell wrapper um ein Dataframe aus einer Sql Abfrage
#' Könnte in der Zukunft um CRUD-Funktionalitäten erweitert werden.
#' Dataframe sollte komplett gekapselt werden um zb "AddColumn" zu verhindern.
#'
#'
#' @docType class
#' @importFrom R6 R6Class
#' @keywords data
#' @family sql
#'
#' @section Construction:
#' ```
#' xxxxxxxxxxxxxxxxxxxxxx
#' ```
#'
#' @return Object of \code{\link{R6Class}} xxxxxxxxxxxxxxxxxxxx (x)
#' @format \code{\link{R6Class}} object.
#' @examples
#' xxxxxxxxxxxxxxxxxxxxxx
#'
#'
#' @field x blabla.
#' @field y blabla.
#'
#' @section Methods:
#' \describe{
#'   \item{Documentation}{For full documentation of each method go to https://github.com/ChrisNice89/rdao}
#'   \item{\code{new()}}{xxx \code{Factory}.}
#'   \item{\code{xx(yy,yy="")}}{xx \code{zz}.}
#'   \item{\code{zz(yy,yy="")}}{xx \code{zz}.}}
#'
#' @include utils.R
#' @include sqlInterface.R
sqlResult<- R6::R6Class(
classname = "SqlResult",
inherit = generics,
portable = TRUE,
private = list(
.validator = NULL,
.connection=NULL,
.eod=FALSE,
.shared=NULL
),
public = list(
initialize = function(connection, data) {
private$.validator <- Validator$new(self)
if (private$.validator$isTrustedConnection(connection)) {
if (is.data.frame(data)) {
super$initialize(data)
private$.shared<-super$getPointer()
private$.connection <- connection
}else {
private$.validator$throwWarning("Kein Dataframe","initialize()")
}
}else{
private$.validator$throwError("Keine gültige Verbindung","initialize()")
}
},
getRecords=function(){
i<-private$.shared$index
return(private$.shared$df[i,])
},
countRows=function(){
return(nrow(private$.shared$df))
},
countColumns=function(){
return(ncol(private$.shared$df))
},
read=function(){
i<-private$.shared$index
on.exit(self$row(i+1))
return(!private$.eod)
},
row=function(i){
if(i>self$countRows()){
private$.eod<-TRUE
private$.shared$index<-1
}else{
private$.eod<-FALSE
private$.shared$index<-i
}
invisible(self)
},
toMatrix=function(){
functor <- function(obj) {
structure(
function(i=NA,j=NA) {
obj$matrixAccess(i,j)
},
class = "functor",
obj = obj
)
}
return(functor(super))
},
update=function(){
querys<-list()
print(nrow(private$.shared$df))
for(i in 1:nrow(private$.shared$df)) {
print(i)
querys[[i]]<-sqlUpdateQuery$new(private$.connection,table = "diamonds",id = 1,c("a","b"),c(1,2))
print(querys[[i]]$sql)
}
},
delete=function(rows){
private$.shared$df <- super$getPointer()$df[-rows, ]
invisible(self)
},
add=function(){
}
)
)
#library(rdao)
f<-connectionFactory()
b<-f$dbFile("/Users/cnitz/Dev/R/rdao/db files external/Diamonds.db")
cnn<-b$build()
result<-cnn$createQuery(sql = "Select carat,color FROM diamonds LIMIT 10")$fetch()
result$countRows()
result$update()
View(public)
#' Aktuell wrapper um ein Dataframe aus einer Sql Abfrage
#' Könnte in der Zukunft um CRUD-Funktionalitäten erweitert werden.
#' Dataframe sollte komplett gekapselt werden um zb "AddColumn" zu verhindern.
#'
#'
#' @docType class
#' @importFrom R6 R6Class
#' @keywords data
#' @family sql
#'
#' @section Construction:
#' ```
#' xxxxxxxxxxxxxxxxxxxxxx
#' ```
#'
#' @return Object of \code{\link{R6Class}} xxxxxxxxxxxxxxxxxxxx (x)
#' @format \code{\link{R6Class}} object.
#' @examples
#' xxxxxxxxxxxxxxxxxxxxxx
#'
#'
#' @field x blabla.
#' @field y blabla.
#'
#' @section Methods:
#' \describe{
#'   \item{Documentation}{For full documentation of each method go to https://github.com/ChrisNice89/rdao}
#'   \item{\code{new()}}{xxx \code{Factory}.}
#'   \item{\code{xx(yy,yy="")}}{xx \code{zz}.}
#'   \item{\code{zz(yy,yy="")}}{xx \code{zz}.}}
#'
#' @include utils.R
#' @include sqlInterface.R
sqlResult<- R6::R6Class(
classname = "SqlResult",
inherit = generics,
portable = TRUE,
private = list(
.validator = NULL,
.connection=NULL,
.eod=FALSE,
.shared=NULL
),
public = list(
initialize = function(connection, data) {
private$.validator <- Validator$new(self)
if (private$.validator$isTrustedConnection(connection)) {
if (is.data.frame(data)) {
super$initialize(data)
private$.shared<-super$getPointer()
private$.connection <- connection
}else {
private$.validator$throwWarning("Kein Dataframe","initialize()")
}
}else{
private$.validator$throwError("Keine gültige Verbindung","initialize()")
}
},
getRecords=function(){
i<-private$.shared$index
return(private$.shared$df[i,])
},
countRows=function(){
return(nrow(private$.shared$df))
},
countColumns=function(){
return(ncol(private$.shared$df))
},
read=function(){
i<-private$.shared$index
on.exit(self$row(i+1))
return(!private$.eod)
},
row=function(i){
if(i>self$countRows()){
private$.eod<-TRUE
private$.shared$index<-1
}else{
private$.eod<-FALSE
private$.shared$index<-i
}
invisible(self)
},
toMatrix=function(){
functor <- function(obj) {
structure(
function(i=NA,j=NA) {
obj$matrixAccess(i,j)
},
class = "functor",
obj = obj
)
}
return(functor(super))
},
update=function(){
querys<-list()
print(nrow(private$.shared$df))
for(i in 1:nrow(private$.shared$df)) {
print(i)
querys[[i]]<-sqlUpdateQuery$new(private$.connection,table = "diamonds",id = 1,c("a","b"),c(1,2))
print(querys[[i]]$sql)
}
},
delete=function(rows){
private$.shared$df <- super$getPointer()$df[-rows, ]
invisible(self)
},
add=function(){
}
)
)
#library(rdao)
f<-connectionFactory()
b<-f$dbFile("/Users/cnitz/Dev/R/rdao/db files external/Diamonds.db")
cnn<-b$build()
result<-cnn$createQuery(sql = "Select carat,color FROM diamonds LIMIT 10")$fetch()
result$countRows()
result$update()
#' Aktuell wrapper um ein Dataframe aus einer Sql Abfrage
#' Könnte in der Zukunft um CRUD-Funktionalitäten erweitert werden.
#' Dataframe sollte komplett gekapselt werden um zb "AddColumn" zu verhindern.
#'
#'
#' @docType class
#' @importFrom R6 R6Class
#' @keywords data
#' @family sql
#'
#' @section Construction:
#' ```
#' xxxxxxxxxxxxxxxxxxxxxx
#' ```
#'
#' @return Object of \code{\link{R6Class}} xxxxxxxxxxxxxxxxxxxx (x)
#' @format \code{\link{R6Class}} object.
#' @examples
#' xxxxxxxxxxxxxxxxxxxxxx
#'
#'
#' @field x blabla.
#' @field y blabla.
#'
#' @section Methods:
#' \describe{
#'   \item{Documentation}{For full documentation of each method go to https://github.com/ChrisNice89/rdao}
#'   \item{\code{new()}}{xxx \code{Factory}.}
#'   \item{\code{xx(yy,yy="")}}{xx \code{zz}.}
#'   \item{\code{zz(yy,yy="")}}{xx \code{zz}.}}
#'
#' @include utils.R
#' @include sqlInterface.R
sqlResult<- R6::R6Class(
classname = "SqlResult",
inherit = generics,
portable = TRUE,
private = list(
.validator = NULL,
.connection=NULL,
.eod=FALSE,
.shared=NULL
),
public = list(
initialize = function(connection, data) {
private$.validator <- Validator$new(self)
if (private$.validator$isTrustedConnection(connection)) {
if (is.data.frame(data)) {
super$initialize(data)
private$.shared<-super$getPointer()
private$.connection <- connection
}else {
private$.validator$throwWarning("Kein Dataframe","initialize()")
}
}else{
private$.validator$throwError("Keine gültige Verbindung","initialize()")
}
},
getRecords=function(){
i<-private$.shared$index
return(private$.shared$df[i,])
},
countRows=function(){
return(nrow(private$.shared$df))
},
countColumns=function(){
return(ncol(private$.shared$df))
},
read=function(){
i<-private$.shared$index
on.exit(self$row(i+1))
return(!private$.eod)
},
row=function(i){
if(i>self$countRows()){
private$.eod<-TRUE
private$.shared$index<-1
}else{
private$.eod<-FALSE
private$.shared$index<-i
}
invisible(self)
},
toMatrix=function(){
functor <- function(obj) {
structure(
function(i=NA,j=NA) {
obj$matrixAccess(i,j)
},
class = "functor",
obj = obj
)
}
return(functor(super))
},
update=function(){
print("update")
querys<-list()
print(nrow(private$.shared$df))
for(i in 1:nrow(private$.shared$df)) {
print(i)
querys[[i]]<-sqlUpdateQuery$new(private$.connection,table = "diamonds",id = 1,c("a","b"),c(1,2))
print(querys[[i]]$sql)
}
},
delete=function(rows){
private$.shared$df <- super$getPointer()$df[-rows, ]
invisible(self)
},
add=function(){
}
)
)
#library(rdao)
f<-connectionFactory()
b<-f$dbFile("/Users/cnitz/Dev/R/rdao/db files external/Diamonds.db")
cnn<-b$build()
result<-cnn$createQuery(sql = "Select carat,color FROM diamonds LIMIT 10")$fetch()
result$countRows()
result$update()
# helper
installer <- function(pkg){
new.pkg <- pkg[!(pkg %in% installed.packages()[, "Package"])]
if (length(new.pkg))
install.packages(new.pkg, dependencies = TRUE)
sapply(pkg, require, character.only = TRUE)
}
packages<- c("devtools", "roxygen2","R6","rmarkdown","pryr","DBI")
installer(packages)
library(roxygen2)
setwd("~/Dev/R/rdao")
document()
library(pkgdown)
build_site()
rmarkdown::render("vignettes/Test.Rmd",output_file = "Test.html",output_dir = "docs/articles")
rdao::diamonds
remove.packages("rdao")
devtools::install_github("Chrisnice89/rdao")
library(rdao)
f<-connectionFactory()
b<-f$dbFile("/Users/cnitz/Dev/R/rdao/db files external/Diamonds.db")
cnn<-b$build()
cnn$isConnected()
qry<-cnn$createQuery(sql = "Select * FROM diamonds")
result<-qry$execute()
