portable = TRUE,
private = list(
.validator = NULL,
.connection = NULL,
.provider = NULL,
.driver=NULL,
.connectionstring=""
),
public = list(
provider = "",
connectionstring = "",
initialize = function(connection) {
private$.validator <- Validator$new(self)
print(class(connection))
if(DBI::dbIsValid(connection)){
private$.connection<-connection
} else{
msg<-paste("Invalid connection: <",class(connection[1],">",sep=""))
private$.validator$throwError(msg,"initialize()")
}
make.readonly(self,"connectionstring", "provider")
#invisible(self$print())
},
#methods
connect = function() {
if (!DBI::dbIsValid(private$.connection)) {
dbConnect(private$.connection)
}
return(self$isConnected())
},
disconnect = function() {
if (DBI::dbIsValid(private$.connection)) {
DBI::dbDisconnect(private$.connection)
}
return(!self$isConnected())
},
finalize =function(){
self$disconnect()
},
isConnected=function(){
return(DBI::dbIsValid(private$.connection))
},
getTables=function(){
dbListTables(private$.connection)
},
print = function(...) {
msg <- paste("<", class(self)[1], ">", sep = "")
if (private$.validator$isCharacter(private$.provider)) {
msg <-paste(msg, "> for provider: <", private$.provider, ">", sep = "")
}
cat(msg, " created", "\n", sep = "")
invisible(self)
}
)
)
# b<-Builder$new("sqlite")
# b$path<-"/Users/cnitz/Dev/R/rdao/db files external/Diamonds.db"
# cnn<-b$build()
# cnn$connect()
# cnn$isConnected()
#
# cnn$disconnect()
#' Class providing methods for building connection object
#'
#' @docType class
#' @importFrom R6 R6Class
#' @keywords data
#' @family sql
#' @return Object of \code{\link{R6Class}} with methods for communication with a database (server)
#' @format \code{\link{R6Class}} object.
#' @examples
#' b<-Builder$new(provider = "MySql")
#' cnn<-b$build()
#'
#' b<-Builder$new(provider = "MySql")
#' cnn<-b$addCredentials(username = "Admin",password = "SesameOpen")$build()
#'
#' @field serveraddress Stores address of your lightning server.
#' @field sessionid Stores id of your current session on the server.
#'
#' @section Methods:
#' \describe{
#'   \item{Documentation}{For full documentation of each method go to https://github.com/ChrisNice89/ORM}
#'   \item{\code{new(provider=c(MySql,TsQl,MsAccess), path,dbpassword="")}}{This method creates a builder \code{instance}.}
#'   \item{\code{addCredendials(username="",password="")}}{This method is used to create object of user specified credentials}
#'   \item{\code{build()}}{Creates specified connection to the database (server)}}
#'
#' @include sqlFactory.R
Builder <- R6Class(
classname = "Builder",
inherit = NULL,
portable = TRUE,
# parent_env   = asNamespace("rdao"),
cloneable    = FALSE,
private = list(.validator = NULL,
.dbpassword = ""),
public = list(
builderProvider = "",
driver = "",
path = "",
dsn = "",
database = "",
server = "",
host = "",
port = 0,
credentials = NULL,
initialize = function(provider) {
private$.validator <- Validator$new(self)
self$builderProvider <- provider
make.readonly(self, "builderProvider")
invisible(self$print())
},
addCredentials = function(username = "",
password = "") {
make.readwrite(self, "credentials")
self$credentials <-
Credentials$new(username = username, password = password)
make.readonly(self, "credentials")
invisible(self)
},
#actual implementation
build = function() {
prc <- "build()"
if (!private$.validator$isNullString(self$path)) {
if (!file.exists(self$path)) {
msg <- paste("Ungültiger Pfad", self$path)
private$.validator$throwError(msg, prc)
}
}
switch(
self$builderProvider,
msAccess = {
dbq <- paste0("DBQ=", self$path)
driver <-
"Driver={Microsoft Access Driver (*.mdb, *.accdb)};"
dbiDriver <- odbc::odbc()
connectionstring <- paste0(driver, dbq)
connection <- dbConnect(dbiDriver, connectionstring)
},
sqlite = {
dbiDriver <- RSQLite::SQLite()
connectionstring <-  ":memory:"
connection <- dbConnect(RSQLite::SQLite(),  self$path)
},
mySql = {
connectionstring <- "MySql"
},
msSql = {
connectionstring <- "msSql"
},
{
msg <-
paste("Provider: <",
self$builderProvider,
"> nicht implementiert",
sep = "")
private$.validator$throwError(msg, prc)
}
)
# print(class(dbiDriver))
#  if (!is.function(dbiDriver)){
#    private$.validator$throwError("DBI driver nicht erkannt",prc)
#  } else {
#    private$.dbiDriver<-dbiDriver
#  }
return (sqlConnection$new(connection))
},
print = function(...) {
msg <- paste("<", class(self)[1], ">", sep = "")
if (private$.validator$isCharacter(self$builderProvider)) {
msg <-
paste(msg, "> for provider: <", self$builderProvider, ">", sep = "")
}
cat(msg, " created", "\n", sep = "")
invisible(self)
}
)
)
# v<-Validator$new(b)
# if(v$isNullString(NULL)){
#   print(TRUE)
# } else {
#   print(FALSE)
# }
b <- Builder$new("sqlite")
b$path <- "/Users/cnitz/Dev/R/rdao/db files external/Diamonds.db"
cnn <- b$build()
cnn$connect()
cnn$isConnected()
cnn$getTables()
cnn$isConnected()
cnn$disconnect()
#' Class providing methods for building connection object
#'
#' @docType class
#' @importFrom R6 R6Class
#' @keywords data
#' @family sql
#' @return Object of \code{\link{R6Class}} with methods for communication with a database (server)
#' @format \code{\link{R6Class}} object.
#' @examples
#' b<-Builder$new(provider = "MySql")
#' cnn<-b$build()
#'
#' b<-Builder$new(provider = "MySql")
#' cnn<-b$addCredentials(username = "Admin",password = "SesameOpen")$build()
#'
#' @field serveraddress Stores address of your lightning server.
#' @field sessionid Stores id of your current session on the server.
#'
#' @section Methods:
#' \describe{
#'   \item{Documentation}{For full documentation of each method go to https://github.com/ChrisNice89/ORM}
#'   \item{\code{new(provider=c(MySql,TsQl,MsAccess), path,dbpassword="")}}{This method creates a builder \code{instance}.}
#'   \item{\code{addCredendials(username="",password="")}}{This method is used to create object of user specified credentials}
#'   \item{\code{build()}}{Creates specified connection to the database (server)}}
#'
#' @include sqlFactory.R
Builder <- R6Class(
classname = "Builder",
inherit = NULL,
portable = TRUE,
# parent_env   = asNamespace("rdao"),
cloneable    = FALSE,
private = list(.validator = NULL,
.dbpassword = ""),
public = list(
builderProvider = "",
driver = "",
path = "",
dsn = "",
database = "",
server = "",
host = "",
port = 0,
credentials = NULL,
initialize = function(provider) {
private$.validator <- Validator$new(self)
self$builderProvider <- provider
make.readonly(self, "builderProvider")
invisible(self$print())
},
addCredentials = function(username = "",
password = "") {
make.readwrite(self, "credentials")
self$credentials <-
Credentials$new(username = username, password = password)
make.readonly(self, "credentials")
invisible(self)
},
#actual implementation
build = function() {
prc <- "build()"
if (!private$.validator$isNullString(self$path)) {
if (!file.exists(self$path)) {
msg <- paste("Ungültiger Pfad", self$path)
private$.validator$throwError(msg, prc)
}
}
switch(
self$builderProvider,
msAccess = {
dbq <- paste0("DBQ=", self$path)
driver <-
"Driver={Microsoft Access Driver (*.mdb, *.accdb)};"
dbiDriver <- odbc::odbc()
connectionstring <- paste0(driver, dbq)
connection <- dbConnect(dbiDriver, connectionstring)
},
sqlite = {
dbiDriver <- RSQLite::SQLite()
connectionstring <-  ":memory:"
connection <- dbConnect(RSQLite::SQLite(),  self$path)
},
mySql = {
connectionstring <- "MySql"
},
msSql = {
connectionstring <- "msSql"
},
{
msg <-
paste("Provider: <",
self$builderProvider,
"> nicht implementiert",
sep = "")
private$.validator$throwError(msg, prc)
}
)
# print(class(dbiDriver))
#  if (!is.function(dbiDriver)){
#    private$.validator$throwError("DBI driver nicht erkannt",prc)
#  } else {
#    private$.dbiDriver<-dbiDriver
#  }
return (sqlConnection$new(connection))
},
print = function(...) {
msg <- paste("<", class(self)[1], ">", sep = "")
if (private$.validator$isCharacter(self$builderProvider)) {
msg <-
paste(msg, "> for provider: <", self$builderProvider, ">", sep = "")
}
cat(msg, " created", "\n", sep = "")
invisible(self)
}
)
)
# v<-Validator$new(b)
# if(v$isNullString(NULL)){
#   print(TRUE)
# } else {
#   print(FALSE)
# }
b <- Builder$new("sqlite")
b$path <- "/Users/cnitz/Dev/R/rdao/db files external/Diamonds.db"
cnn <- b$build()
cnn$connect()
cnn$isConnected()
cnn$getTables()
cnn$isConnected()
cnn$disconnect()
#' Class providing methods for building connection object
#'
#' @docType class
#' @importFrom R6 R6Class
#' @keywords data
#' @family sql
#' @return Object of \code{\link{R6Class}} with methods for communication with a database (server)
#' @format \code{\link{R6Class}} object.
#' @examples
#' b<-Builder$new(provider = "MySql")
#' cnn<-b$build()
#'
#' b<-Builder$new(provider = "MySql")
#' cnn<-b$addCredentials(username = "Admin",password = "SesameOpen")$build()
#'
#' @field serveraddress Stores address of your lightning server.
#' @field sessionid Stores id of your current session on the server.
#'
#' @section Methods:
#' \describe{
#'   \item{Documentation}{For full documentation of each method go to https://github.com/ChrisNice89/ORM}
#'   \item{\code{new(provider=c(MySql,TsQl,MsAccess), path,dbpassword="")}}{This method creates a builder \code{instance}.}
#'   \item{\code{addCredendials(username="",password="")}}{This method is used to create object of user specified credentials}
#'   \item{\code{build()}}{Creates specified connection to the database (server)}}
#'
#' @include sqlFactory.R
Builder <- R6Class(
classname = "Builder",
inherit = NULL,
portable = TRUE,
# parent_env   = asNamespace("rdao"),
cloneable    = FALSE,
private = list(.validator = NULL,
.dbpassword = ""),
public = list(
builderProvider = "",
driver = "",
path = "",
dsn = "",
database = "",
server = "",
host = "",
port = 0,
credentials = NULL,
initialize = function(provider) {
private$.validator <- Validator$new(self)
self$builderProvider <- provider
make.readonly(self, "builderProvider")
invisible(self$print())
},
addCredentials = function(username = "",
password = "") {
make.readwrite(self, "credentials")
self$credentials <-
Credentials$new(username = username, password = password)
make.readonly(self, "credentials")
invisible(self)
},
#actual implementation
build = function() {
prc <- "build()"
if (!private$.validator$isNullString(self$path)) {
if (!file.exists(self$path)) {
msg <- paste("Ungültiger Pfad", self$path)
private$.validator$throwError(msg, prc)
}
}
switch(
self$builderProvider,
msAccess = {
dbq <- paste0("DBQ=", self$path)
driver <-
"Driver={Microsoft Access Driver (*.mdb, *.accdb)};"
dbiDriver <- odbc::odbc()
connectionstring <- paste0(driver, dbq)
connection <- dbConnect(dbiDriver, connectionstring)
},
sqlite = {
dbiDriver <- RSQLite::SQLite()
connectionstring <-  ":memory:"
connection <- dbConnect(RSQLite::SQLite(),  self$path)
},
mySql = {
connectionstring <- "MySql"
},
msSql = {
connectionstring <- "msSql"
},
{
msg <-
paste("Provider: <",
self$builderProvider,
"> nicht implementiert",
sep = "")
private$.validator$throwError(msg, prc)
}
)
# print(class(dbiDriver))
#  if (!is.function(dbiDriver)){
#    private$.validator$throwError("DBI driver nicht erkannt",prc)
#  } else {
#    private$.dbiDriver<-dbiDriver
#  }
return (sqlConnection$new(connection))
},
print = function(...) {
msg <- paste("<", class(self)[1], ">", sep = "")
if (private$.validator$isCharacter(self$builderProvider)) {
msg <-
paste(msg, "> for provider: <", self$builderProvider, ">", sep = "")
}
cat(msg, " created", "\n", sep = "")
invisible(self)
}
)
)
# v<-Validator$new(b)
# if(v$isNullString(NULL)){
#   print(TRUE)
# } else {
#   print(FALSE)
# }
b <- Builder$new("sqlite")
b$path <- "/Users/cnitz/Dev/R/rdao/db files external/Diamonds.db"
cnn <- b$build()
cnn$connect()
cnn$isConnected()
cnn$getTables()
cnn$isConnected()
cnn$disconnect()
# roxygen2 make documentation
setwd("~/Dev/R/rdao")
library(devtools)
document()
# roxygen2 make documentation
setwd("~/Dev/R/rdao")
library(devtools)
document()
?ODCB
?odcb
# roxygen2 make documentation
setwd("~/Dev/R/rdao")
library(devtools)
document()
# roxygen2 make documentation
setwd("~/Dev/R/rdao")
library(devtools)
document()
remove.packages("rdao")
devtools::install_github("Chrisnice89/rdao")
library(rdao)
f<-factory()
b<-f$msAccess(path = "testpath",dbpassword = "SesameOpen")
b$build()
b<-f$msAccess(path = "/Users/cnitz/Dev/R/rdao/db files external/Diamonds.db",dbpassword = "SesameOpen")
b$build()
library(odcb)
b$build()
b<-f$dbFile("/Users/cnitz/Dev/R/rdao/db files external/Diamonds.db")
b<-f$dbFile("/Users/cnitz/Dev/R/rdao/db files external/Diamonds.db")
remove.packages("rdao")
devtools::install_github("Chrisnice89/rdao")
library(rdao)
b<-f$dbFile("/Users/cnitz/Dev/R/rdao/db files external/Diamonds.db")
f<-factory()
b<-f$dbFile("/Users/cnitz/Dev/R/rdao/db files external/Diamonds.db")
# roxygen2 make documentation
setwd("~/Dev/R/rdao")
library(devtools)
document()
remove.packages("rdao")
remove.packages("rdao")
devtools::install_github("Chrisnice89/rdao")
remove.packages("rdao")
devtools::install_github("Chrisnice89/rdao")
f<-factory()
library(rdao)
f<-factory()
b<-f$msAccess(path = "/Users/cnitz/Dev/R/rdao/db files external/Diamonds.db",dbpassword = "SesameOpen")
b$build()
b<-f$dbFile("/Users/cnitz/Dev/R/rdao/db files external/Diamonds.db")
cnn<-b$build()
cnn$isConnected()
remove.packages("rdao")
devtools::install_github("Chrisnice89/rdao")
library(rdao)
f<-factory()
b<-f$dbFile("/Users/cnitz/Dev/R/rdao/db files external/Diamonds.db")
cnn<-b$build()
cnn$isConnected()
