self$x<- x
self$y<-y
self$z<-z
#private$.validator <- Validator$new(self)
}
)
)
IDiamonds <- R6::R6Class(
classname = "Diamonds interface",
inherit = businessLogic,
portable = TRUE,
private = list(.validator = NULL,
.diamonds = NULL),
public = list(
initialize = function(connection) {
private$.validator <- Validator$new(self)
super$initialize(connection)
}
)
)
diamondsFactory = function(connection) {
return(IDiamonds$new(connection))
}
cnn <-factory()$dbFile("/Users/cnitz/Dev/R/rdao/db files external/Diamonds.db")$build()
diamonds <- diamondsFactory(connection = cnn)
result <- diamonds$loadDiamonds()
head(result$data)
head(result$data)
View(result)
View(result)
head(result[[1]]$carat)
result <- diamonds$loadAll()
result <- diamonds$loadAll()$data
result <- diamonds$loadDiamonds()
result <- diamonds$loadDiamonds()
#result <- diamonds$loadAll()$data
head(result[[1]]$carat)
result <- diamonds$loadAll()$data
head(result)
remove.packages("rdao")
setwd("~/Dev/R")
library(devtools)
setwd("~/Dev/R")
documnet()
document()
remove.packages("rdao")
devtools::install_github("Chrisnice89/rdao")
library(rdao)
library(devtools)
setwd("~/Dev/R")
document()
setwd("~/Dev/R")
document()
library(roxygen2)
setwd("~/Dev/R")
document()
library(roxygen2)
setwd("~/Dev/R")
document()
# helper
installer <- function(pkg){
new.pkg <- pkg[!(pkg %in% installed.packages()[, "Package"])]
if (length(new.pkg))
install.packages(new.pkg, dependencies = TRUE)
sapply(pkg, require, character.only = TRUE)
}
packages<- c("devtools", "roxygen2","R6","rmarkdown","pryr","DBI")
installer(packages)
library(roxygen2)
setwd("~/Dev/R")
document()
# helper
installer <- function(pkg){
new.pkg <- pkg[!(pkg %in% installed.packages()[, "Package"])]
if (length(new.pkg))
install.packages(new.pkg, dependencies = TRUE)
sapply(pkg, require, character.only = TRUE)
}
packages<- c("devtools", "roxygen2","R6","rmarkdown","pryr","DBI")
installer(packages)
library(roxygen2)
setwd("~/Dev/R")
document()
# helper
installer <- function(pkg){
new.pkg <- pkg[!(pkg %in% installed.packages()[, "Package"])]
if (length(new.pkg))
install.packages(new.pkg, dependencies = TRUE)
sapply(pkg, require, character.only = TRUE)
}
packages<- c("devtools", "roxygen2","R6","rmarkdown","pryr","DBI")
installer(packages)
library(roxygen2)
setwd("~/Dev/R")
document()
library(roxygen2)
setwd("~/Dev/R")
document()
library(roxygen2)
setwd("~/Dev/R")
document()
library(roxygen2)
setwd("~/Dev/R")
document()
library(roxygen2)
setwd("~/Dev/R")
document()
library(roxygen2)
setwd("~/Dev/R")
document()
library(roxygen2)
setwd("~/Dev/R/rdao")
document()
#
install.packages("desc")
install.packages("desc")
library(roxygen2)
setwd("~/Dev/R/rdao")
document()
# helper
installer <- function(pkg){
new.pkg <- pkg[!(pkg %in% installed.packages()[, "Package"])]
if (length(new.pkg))
install.packages(new.pkg, dependencies = TRUE)
sapply(pkg, require, character.only = TRUE)
}
packages<- c("devtools", "roxygen2","R6","rmarkdown","pryr","DBI")
installer(packages)
library(roxygen2)
setwd("~/Dev/R/rdao")
document()
library(roxygen2)
setwd("~/Dev/R/rdao")
document()
#
library(roxygen2)
setwd("~/Dev/R/rdao")
document()
#
library(roxygen2)
setwd("~/Dev/R/rdao")
document()
#
library(roxygen2)
setwd("~/Dev/R/rdao")
document()
library(roxygen2)
setwd("~/Dev/R/rdao")
document()
remove.packages("rdao")
devtools::install_github("Chrisnice89/rdao")
library(rdao)
b<-Builder$new("mySql")
b$addCredentials()
b<-Builder$new("mySql")
b$builderProvider<-"sdasd"
b<-Builder$new("mySql")
b<-Builder$new("msAccess")
b$build()
b$path<-"asas"
b$build()
b<-Builder$new("mySql")
b$path<-"asas"
b$build()
b<-Builder$new("mySql")
b$path<-"asas"
b$build()
b<-Builder$new("mySql")
b$build()
b$build()
b<-Builder$new("mySql")
#' Builder liefert die Bausteine zum erstellen einer Datenbankverbindung
#'
#'
#' @docType class
#' @importFrom R6 R6Class
#' @keywords data
#' @family sql
#'
#' @section Construction:
#' ```
#' xxxxxxxxxxxxxxxxxxxxxx
#' ```
#'
#' @return Object of \code{\link{R6Class}} xxxxxxxxxxxxxxxxxxxx (x)
#' @format \code{\link{R6Class}} object.
#' @examples
#' xxxxxxxxxxxxxxxxxxxxxx
#'
#'
#' @field x blabla.
#' @field y blabla.
#'
#' @section Methods:
#' \describe{
#'   \item{Documentation}{For full documentation of each method go to https://github.com/ChrisNice89/rdao}
#'   \item{\code{new()}}{xxx \code{Factory}.}
#'   \item{\code{xx(yy,yy="")}}{xx \code{zz}.}
#'   \item{\code{zz(yy,yy="")}}{xx \code{zz}.}}
#'
#' @include utils.R
#' @include credentials.R
#' @include sqlConnection.R
Builder <- R6::R6Class(
classname = "Builder",
inherit = NULL,
portable = TRUE,
# parent_env   = asNamespace("rdao"),
cloneable    = FALSE,
private = list(.validator = NULL,
.dbpassword = ""),
public = list(
builderProvider = "",
driver = "",
path = "",
dsn = "",
database = "",
server = "",
host = "",
port = 0,
credentials = NULL,
initialize = function(provider) {
private$.validator <- Validator$new(self)
self$builderProvider <- provider
private$.validator$makeReadonly("builderProvider")
invisible(self$print())
},
addCredentials = function(username = "",
password = "") {
private$.validator$makeReadwrite("credentials")
self$credentials <-Credentials$new(username = username, password = password)
private$.validator$makeReadonly("credentials")
invisible(self)
},
#actual implementation
build = function() {
prc <- "build()"
if (!private$.validator$isNullString(self$path)) {
if (!file.exists(self$path)) {
msg <- paste("Ungültiger Pfad", self$path)
private$.validator$throwError(msg, prc)
}
}
switch(
self$builderProvider,
msAccess = {
dbq <- paste0("DBQ=", self$path)
driver <-
"Driver={Microsoft Access Driver (*.mdb, *.accdb)};"
dbiDriver <- odbc::odbc
connectionstring <- paste0(driver, dbq)
return (msAccessConnection$new(provider = self$builderProvider,dbiDriver,connectionstring))
},
dbFile = {
dbiDriver <- RSQLite::SQLite
return (dbFileConnection$new(provider = self$builderProvider, dbiDriver,self$path))
},
dataFrame = {
dbiDriver <- RSQLite::SQLite
return (sqliteConnection$new(provider = self$builderProvider, ":memory:",dbiDriver))
},
mySql = {
msg <- paste("Noch nicht implementiert:", self$builderProvide)
private$.validator$throwError(msg, prc)
},
msSql = {
msg <- paste("Noch nicht implementiert:", self$builderProvide)
private$.validator$throwError(msg, prc)
},
{
msg <-
msg <- paste("Noch nicht implementiert:", self$builderProvide)
private$.validator$throwError(msg, prc)
}
)
},
print = function() {
msg <- paste("<", class(self)[1], ">", sep = "")
if (private$.validator$isCharacter(self$builderProvider) ) {
msg <-
paste(msg, " for provider: <", self$builderProvider, ">", sep = "")
}
cat(msg, " created", "\n", sep = "")
invisible(self)
}
)
)
b<-Builder$new("mySql")
b$build()
#' Builder liefert die Bausteine zum erstellen einer Datenbankverbindung
#'
#'
#' @docType class
#' @importFrom R6 R6Class
#' @keywords data
#' @family sql
#'
#' @section Construction:
#' ```
#' xxxxxxxxxxxxxxxxxxxxxx
#' ```
#'
#' @return Object of \code{\link{R6Class}} xxxxxxxxxxxxxxxxxxxx (x)
#' @format \code{\link{R6Class}} object.
#' @examples
#' xxxxxxxxxxxxxxxxxxxxxx
#'
#'
#' @field x blabla.
#' @field y blabla.
#'
#' @section Methods:
#' \describe{
#'   \item{Documentation}{For full documentation of each method go to https://github.com/ChrisNice89/rdao}
#'   \item{\code{new()}}{xxx \code{Factory}.}
#'   \item{\code{xx(yy,yy="")}}{xx \code{zz}.}
#'   \item{\code{zz(yy,yy="")}}{xx \code{zz}.}}
#'
#' @include utils.R
#' @include credentials.R
#' @include sqlConnection.R
Builder <- R6::R6Class(
classname = "Builder",
inherit = NULL,
portable = TRUE,
# parent_env   = asNamespace("rdao"),
cloneable    = FALSE,
private = list(.validator = NULL,
.dbpassword = ""),
public = list(
builderProvider = "",
driver = "",
path = "",
dsn = "",
database = "",
server = "",
host = "",
port = 0,
credentials = NULL,
initialize = function(provider) {
private$.validator <- Validator$new(self)
self$builderProvider <- provider
private$.validator$makeReadonly("builderProvider")
invisible(self$print())
},
addCredentials = function(username = "",
password = "") {
private$.validator$makeReadwrite("credentials")
self$credentials <-Credentials$new(username = username, password = password)
private$.validator$makeReadonly("credentials")
invisible(self)
},
#actual implementation
build = function() {
prc <- "build()"
if (!private$.validator$isNullString(self$path)) {
if (!file.exists(self$path)) {
msg <- paste("Ungültiger Pfad", self$path)
private$.validator$throwError(msg, prc)
}
}
switch(
self$builderProvider,
msAccess = {
dbq <- paste0("DBQ=", self$path)
driver <-
"Driver={Microsoft Access Driver (*.mdb, *.accdb)};"
dbiDriver <- odbc::odbc
connectionstring <- paste0(driver, dbq)
return (msAccessConnection$new(provider = self$builderProvider,dbiDriver,connectionstring))
},
dbFile = {
dbiDriver <- RSQLite::SQLite
return (dbFileConnection$new(provider = self$builderProvider, dbiDriver,self$path))
},
dataFrame = {
dbiDriver <- RSQLite::SQLite
return (sqliteConnection$new(provider = self$builderProvider, ":memory:",dbiDriver))
},
mySql = {
msg <- paste("Noch nicht implementiert:", self$builderProvider)
private$.validator$throwError(msg, prc)
},
msSql = {
msg <- paste("Noch nicht implementiert:", self$builderProvider)
private$.validator$throwError(msg, prc)
},
{
msg <-
msg <- paste("Noch nicht implementiert:", self$builderProvider)
private$.validator$throwError(msg, prc)
}
)
},
print = function() {
msg <- paste("<", class(self)[1], ">", sep = "")
if (private$.validator$isCharacter(self$builderProvider) ) {
msg <-
paste(msg, " for provider: <", self$builderProvider, ">", sep = "")
}
cat(msg, " created", "\n", sep = "")
invisible(self)
}
)
)
b<-Builder$new("mySql")
b$build()
f<-ConnectionFactory()
f<-connectionFactory()
b<-f$dbFile("/Users/cnitz/Dev/R/rdao/db files external/Diamonds.db")
cnn<-b$build()
cnn$getTables()
cnn$isConnected()
connection.dbFile$isConnected()
f <- connectionFactory()
class(f)
library(rdao)
path<-"/Users/cnitz/Dev/R/rdao/db files external/Diamonds.db"
f <- connectionFactory()
#Für ein db File
builder.dbFile<-f$dbFile(path)
connection.dbFile<-builder.dbFile$build()
connection.dbFile$isConnected()
connection.dbFile$connect()
connection.dbFile$isConnected()
connection.dbFile$connect()
connection.dbFile$isConnected()
connection.dbFile$disconnect()
connection.dbFile$isConnected()
query<-connection.dbFile$createQuery(sql = "SELECT * FROM diamonds")
query$provider
query$sql
query$sql<-"SELECT * FROM diamonds"
query<-connection.dbFile$createQuery(sql = "SELECT * FROM diamonds")
class(query)
query$provider
query$sql
query<-connection.dbFile$createQuery(sql = paste("SELECT * FROM diamonds WHERE cut=",quality,sep=""))
quality<-"Premium"
query<-connection.dbFile$createQuery(sql = paste("SELECT * FROM diamonds WHERE cut=",quality,sep=""))
query$sql
quality<-"Premium"
query<-connection.dbFile$createQuery(sql = paste("SELECT * FROM diamonds WHERE cut='",quality,"'",sep=""))
query$sql
quality<-"Premium"
query.premium<-connection.dbFile$createQuery(sql = paste("SELECT * FROM diamonds WHERE cut='",quality,"'",sep=""))
query.premium$sql
result<-query.premium$fetch()
query<-connection.dbFile$createQuery(sql = "SELECT * FROM diamonds")
class(query)
query$provider
query$sql
result.premium<-query.premium$fetch()
result<-query$fetch()
result.premium<-query.premium$fetch()
class(result)
quality<-"Premium"
#quality<-"Premium"
query.premium<-connection.dbFile$createQuery(sql = "SELECT * FROM diamonds WHERE cut=?")
#qquery.premium$addParameter(name="quality", value= quality)
query.premium$sql
query.premium<-connection.dbFile$createQuery(sql = paste("SELECT * FROM diamonds WHERE cut='",quality,"'",sep=""))
query.premium$sql
result<-query$fetch()
result.premium<-query.premium$fetch()
class(result)
result$rows()
head(result$data)
result$data<-NULL
result.premium<-query.premium$fetch()
result.premium<-query.premium$fetch()
```{r}
connection.dbFile$isConnected()
result.premium<-query.premium$fetch(disconnect = TRUE)
connection.dbFile$isConnected()
head(result.premium)
connection.dbFile$isConnected()
result.premium<-query.premium$fetch(disconnect = TRUE)
connection.dbFile$isConnected()
head(result.premium$data)
business<-diamondsFactory(connection.dbFile)
diamonds.best<-business$loadBestQuality()
diamonds.lowbudget<-business$loadQuality("Poor","Fair", "Good")
diamonds.lowbudget<-business$loadQuality("Poor","Fair", "Good")
head(diamonds.lowbudget$data)
diamonds.lowbudget<-business$loadQuality("Poor","Fair", "Good")
diamonds.lowbudget<-business$loadQuality("Fair", "Good")
head(diamonds.lowbudget$data)
business<-diamondsFactory(connection.dbFile)
class(business)
diamonds.best<-business$loadBestQuality()
head(diamonds.best$data)
diamonds.selected<-business$loadColumns("carat","color")
head(diamonds.selected$data)
diamonds<-business$loadDiamonds()
diamonds<-business$loadDiamonds()
class(diamonds)
library(roxygen2)
setwd("~/Dev/R/rdao")
document()
library(roxygen2)
setwd("~/Dev/R/rdao")
document()
library(roxygen2)
setwd("~/Dev/R/rdao")
document()
remove.packages("rdao")
devtools::install_github("Chrisnice89/rdao")
library(rdao)
rdao::diamonds
?rdao::diamonds
knit_with_parameters('~/Dev/R/rdao/vignettes/Framework.Rmd')
