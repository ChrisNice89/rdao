# B <- R6::R6Class("Middle", inherit = A)
# C <- R6::R6Class("Top", inherit = B)
#
# v<- Validator$new()
# v$findClasses(C)
# v$inherits(C,"Middle")
b <- Builder$new("sqlite")
b$path <- "/Users/cnitz/Dev/R/rdao/db files external/Diamonds.db"
cnn <- b$build()
#' Class providing some methods to manage db connection
#'
#' @docType class
#' @importFrom R6 R6Class
#' @keywords connectoion
#' @section Construction:
#' ```
#' sqlConnection$new()
#' ```
#' @return Object of \code{\link{R6Class}} with methods for communication with a database (server)
#' @format \code{\link{R6Class}} object.
#' @examples
#' # cnn<-sqlConnection$new(connectionstring = "myconnectionstring")
#
#' @field
#'
#' @section Methods:
#' \describe{
#'   \item{Documentation}{For full documentation of each method go to https://github.com/ChrisNice89/ORM}
#'   \item{\code{new()}}{This method creates a sqlConnection \code{instance}.}
#'   \item{\code{isString((x, objnm = deparse(substitute(x))))}}{Check if x is numeric}
#'   \item{\code{isNumeric((x, objnm = deparse(substitute(x))))}}{Check if x is numeric}}
#' @family sql
#' @include utils.R
sqlConnection <- R6Class(
classname = "Abstrakt SqlConnection",
inherit = NULL,
portable = TRUE,
private = list(
.intitilized = FALSE,
.validator = NULL,
.connection = NULL,
.driver = NULL,
.credentials = list(),
.dbiConnect = function(driverGenerator, ...) {
if (is.function(driverGenerator)) {
DBI::dbConnect(driverGenerator(), ...)
} else {
private$.validator$throwError("Driver generator ist ungültig", "connect()")
}
}
),
public = list(
provider = "",
initialize = function(provider, ...) {
private$.validator <- Validator$new(self)
private$.credentials$params <- list(...)
self$provider <- provider
make.readonly(self, "provider")
invisible(self$print())
},
connect = function() {
if(!self$isConnected()){
private$.connection <-
do.call(private$.dbiConnect, private$.credentials$params)
}
return(self$isConnected())
},
disconnect = function() {
if (self$isConnected()) {
DBI::dbDisconnect(private$.connection)
}
return(!self$isConnected())
},
finalize = function() {
self$disconnect()
},
isConnected = function() {
if (!is.null(private$.connection)) {
return(DBI::dbIsValid(private$.connection))
} else {
return(FALSE)
}
},
getTables = function() {
dbListTables(private$.connection)
},
print = function(...) {
msg <- paste("<", class(self)[1], ">", sep = "")
if (!private$.validator$isNullString(self$provider)) {
msg <-
paste(msg, "> for provider: <", self$provider, ">", sep = "")
}
cat(msg, " created", "\n", sep = "")
invisible(self)
}
)
)
sqlite <- R6Class(
classname = "SqlConnection",
inherit = sqlConnection,
portable = TRUE,
public = list(
initialize = function(provider, ...) {
print("hier")
super$initialize(provider, ...)
print("hier2")
super$print()
invisible(self)
}
)
)
b <- Builder$new("sqlite")
b$path <- "/Users/cnitz/Dev/R/rdao/db files external/Diamonds.db"
cnn <- b$build()
cnn$connect()
cnn$getTables()
cnn$isConnected()
cnn$disconnect()
cnn$isConnected()
cnn$connect()
cnn$isConnected()
cnn$disconnect()
cnn$isConnected()
#' Class providing some methods to manage db connection
#'
#' @docType class
#' @importFrom R6 R6Class
#' @keywords connectoion
#' @section Construction:
#' ```
#' sqlConnection$new()
#' ```
#' @return Object of \code{\link{R6Class}} with methods for communication with a database (server)
#' @format \code{\link{R6Class}} object.
#' @examples
#' # cnn<-sqlConnection$new(connectionstring = "myconnectionstring")
#
#' @field
#'
#' @section Methods:
#' \describe{
#'   \item{Documentation}{For full documentation of each method go to https://github.com/ChrisNice89/ORM}
#'   \item{\code{new()}}{This method creates a sqlConnection \code{instance}.}
#'   \item{\code{isString((x, objnm = deparse(substitute(x))))}}{Check if x is numeric}
#'   \item{\code{isNumeric((x, objnm = deparse(substitute(x))))}}{Check if x is numeric}}
#' @family sql
#' @include utils.R
sqlConnection <- R6Class(
classname = "Abstrakt SqlConnection",
inherit = NULL,
portable = TRUE,
private = list(
.intitilized = FALSE,
.validator = NULL,
.connection = NULL,
.driver = NULL,
.credentials = list(),
.dbiConnect = function(driverGenerator, ...) {
if (is.function(driverGenerator)) {
DBI::dbConnect(driverGenerator(), ...)
} else {
private$.validator$throwError("Driver generator ist ungültig", "connect()")
}
}
),
public = list(
provider = "",
initialize = function(provider, ...) {
private$.validator <- Validator$new(self)
private$.credentials$params <- list(...)
self$provider <- provider
make.readonly(self, "provider")
invisible(self$print())
},
connect = function() {
if(!self$isConnected()){
private$.connection <-
do.call(private$.dbiConnect, private$.credentials$params)
}
return(self$isConnected())
},
disconnect = function() {
if (self$isConnected()) {
DBI::dbDisconnect(private$.connection)
}
return(!self$isConnected())
},
finalize = function() {
self$disconnect()
},
isConnected = function() {
if (!is.null(private$.connection)) {
return(DBI::dbIsValid(private$.connection))
} else {
return(FALSE)
}
},
getTables = function() {
dbListTables(private$.connection)
},
print = function(...) {
msg <- paste("<", class(self)[1], ">", sep = "")
if (!private$.validator$isNullString(self$provider)) {
msg <-
paste(msg, "> for provider: <", self$provider, ">", sep = "")
}
cat(msg, " created", "\n", sep = "")
invisible(self)
}
)
)
# quasi interface
dbFileConnection <- R6Class(
classname = "SqlConnection",
inherit = sqlConnection,
portable = TRUE,
public = list(
initialize = function(provider,driverGenerator, path) {
super$initialize(provider, ...=driverGenerator, path)
invisible(self)
}
)
)
msAccessFileConnection <- R6Class(
classname = "SqlConnection",
inherit = sqlConnection,
portable = TRUE,
public = list(
initialize = function(provider, driverGenerator,connectionstring) {
super$initialize(provider, ...=driverGenerator,connectionstring)
invisible(self)
}
)
)
# b <- Builder$new("sqlite")
# b$path <- "/Users/cnitz/Dev/R/rdao/db files external/Diamonds.db"
# cnn <- b$build()
# cnn$connect()
# cnn$getTables()
# cnn$isConnected()
# cnn$disconnect()
# cnn$isConnected()
# cnn$connect()
# cnn$isConnected()
# cnn$disconnect()
# cnn$isConnected()
# helper
installer <- function(pkg){
new.pkg <- pkg[!(pkg %in% installed.packages()[, "Package"])]
if (length(new.pkg))
install.packages(new.pkg, dependencies = TRUE)
sapply(pkg, require, character.only = TRUE)
}
packages<- c("devtools", "roxygen2","R6","rmarkdown","pryr","DBI")
installer(packages)
#' Class providing some methods to manage db connection
#'
#' @docType class
#' @importFrom R6 R6Class
#' @keywords connectoion
#' @section Construction:
#' ```
#' sqlConnection$new()
#' ```
#' @return Object of \code{\link{R6Class}} with methods for communication with a database (server)
#' @format \code{\link{R6Class}} object.
#' @examples
#' # cnn<-sqlConnection$new(connectionstring = "myconnectionstring")
#
#' @field
#'
#' @section Methods:
#' \describe{
#'   \item{Documentation}{For full documentation of each method go to https://github.com/ChrisNice89/ORM}
#'   \item{\code{new()}}{This method creates a sqlConnection \code{instance}.}
#'   \item{\code{isString((x, objnm = deparse(substitute(x))))}}{Check if x is numeric}
#'   \item{\code{isNumeric((x, objnm = deparse(substitute(x))))}}{Check if x is numeric}}
#' @family sql
#' @include utils.R
sqlConnection <- R6Class(
classname = "Abstrakt SqlConnection",
inherit = NULL,
portable = TRUE,
private = list(
.intitilized = FALSE,
.validator = NULL,
.connection = NULL,
.driver = NULL,
.credentials = list(),
.dbiConnect = function(driverGenerator, ...) {
if (is.function(driverGenerator)) {
DBI::dbConnect(driverGenerator(), ...)
} else {
private$.validator$throwError("Driver generator ist ungültig", "connect()")
}
}
),
public = list(
provider = "",
initialize = function(provider, ...) {
private$.validator <- Validator$new(self)
private$.credentials$params <- list(...)
self$provider <- provider
make.readonly(self, "provider")
invisible(self$print())
},
connect = function() {
if(!self$isConnected()){
private$.connection <-
do.call(private$.dbiConnect, private$.credentials$params)
}
return(self$isConnected())
},
disconnect = function() {
if (self$isConnected()) {
DBI::dbDisconnect(private$.connection)
}
return(!self$isConnected())
},
finalize = function() {
self$disconnect()
},
isConnected = function() {
if (!is.null(private$.connection)) {
return(DBI::dbIsValid(private$.connection))
} else {
return(FALSE)
}
},
getTables = function() {
dbListTables(private$.connection)
},
print = function(...) {
msg <- paste("<", class(self)[1], ">", sep = "")
if (!private$.validator$isNullString(self$provider)) {
msg <-
paste(msg, "> for provider: <", self$provider, ">", sep = "")
}
cat(msg, " created", "\n", sep = "")
invisible(self)
}
)
)
# quasi interface
dbFileConnection <- R6Class(
classname = "SqlConnection",
inherit = sqlConnection,
portable = TRUE,
public = list(
initialize = function(provider,driverGenerator, path) {
super$initialize(provider, ...=driverGenerator, path)
invisible(self)
}
)
)
msAccessFileConnection <- R6Class(
classname = "SqlConnection",
inherit = sqlConnection,
portable = TRUE,
public = list(
initialize = function(provider, driverGenerator,connectionstring) {
super$initialize(provider, ...=driverGenerator,connectionstring)
invisible(self)
}
)
)
# b <- Builder$new("sqlite")
# b$path <- "/Users/cnitz/Dev/R/rdao/db files external/Diamonds.db"
# cnn <- b$build()
# cnn$connect()
# cnn$getTables()
# cnn$isConnected()
# cnn$disconnect()
# cnn$isConnected()
# cnn$connect()
# cnn$isConnected()
# cnn$disconnect()
# cnn$isConnected()
#' Class providing methods for building connection object
#'
#' @docType class
#' @importFrom R6 R6Class
#' @keywords data
#' @family sql
#' @return Object of \code{\link{R6Class}} with methods for communication with a database (server)
#' @format \code{\link{R6Class}} object.
#' @examples
#' b<-Builder$new(provider = "MySql")
#' cnn<-b$build()
#'
#' b<-Builder$new(provider = "MySql")
#' cnn<-b$addCredentials(username = "Admin",password = "SesameOpen")$build()
#'
#' @field serveraddress Stores address of your lightning server.
#' @field sessionid Stores id of your current session on the server.
#'
#' @section Methods:
#' \describe{
#'   \item{Documentation}{For full documentation of each method go to https://github.com/ChrisNice89/ORM}
#'   \item{\code{new(provider=c(MySql,TsQl,MsAccess), path,dbpassword="")}}{This method creates a builder \code{instance}.}
#'   \item{\code{addCredendials(username="",password="")}}{This method is used to create object of user specified credentials}
#'   \item{\code{build()}}{Creates specified connection to the database (server)}}
#'
#' @include sqlFactory.R
Builder <- R6Class(
classname = "Builder",
inherit = NULL,
portable = TRUE,
# parent_env   = asNamespace("rdao"),
cloneable    = FALSE,
private = list(.validator = NULL,
.dbpassword = ""),
public = list(
builderProvider = "",
driver = "",
path = "",
dsn = "",
database = "",
server = "",
host = "",
port = 0,
credentials = NULL,
initialize = function(provider) {
private$.validator <- Validator$new(self)
self$builderProvider <- provider
make.readonly(self, "builderProvider")
invisible(self$print())
},
addCredentials = function(username = "",
password = "") {
make.readwrite(self, "credentials")
self$credentials <-
Credentials$new(username = username, password = password)
make.readonly(self, "credentials")
invisible(self)
},
#actual implementation
build = function() {
prc <- "build()"
if (!private$.validator$isNullString(self$path)) {
if (!file.exists(self$path)) {
msg <- paste("Ungültiger Pfad", self$path)
private$.validator$throwError(msg, prc)
}
}
switch(
self$builderProvider,
msAccess = {
dbq <- paste0("DBQ=", self$path)
driver <-
"Driver={Microsoft Access Driver (*.mdb, *.accdb)};"
dbiDriver <- odbc::odbc
connectionstring <- paste0(driver, dbq)
return (msAccessConnection$new(provider = self$builderProvider, dbiDriver,connectionstring))
},
sqlite = {
dbiDriver <- RSQLite::SQLite
return (sqliteConnection$new(provider = self$builderProvider, dbiDriver,self$path))
},
mySql = {
connectionstring <- "MySql"
},
msSql = {
connectionstring <- "msSql"
},
{
msg <-
paste("Provider: <",
self$builderProvider,
"> nicht implementiert",
sep = "")
private$.validator$throwError(msg, prc)
}
)
},
print = function(...) {
msg <- paste("<", class(self)[1], ">", sep = "")
if (private$.validator$isCharacter(self$builderProvider)) {
msg <-
paste(msg, "> for provider: <", self$builderProvider, ">", sep = "")
}
cat(msg, " created", "\n", sep = "")
invisible(self)
}
)
)
remove.packages("rdao")
devtools::install_github("Chrisnice89/rdao")
library(rdao)
f<-factory()
b<-f$dbFile("/Users/cnitz/Dev/R/rdao/db files external/Diamonds.db")
cnn<-b$build()
cnn<-b$build()
f<-factory()
b<-f$dbFile("/Users/cnitz/Dev/R/rdao/db files external/Diamonds.db")
cnn<-b$build()
remove.packages("rdao")
devtools::install_github("Chrisnice89/rdao")
library(rdao)
f<-factory()
b<-f$dbFile("/Users/cnitz/Dev/R/rdao/db files external/Diamonds.db")
cnn<-b$build()
f<-factory()
b<-f$msAccess(path = "/Users/cnitz/Dev/R/rdao/db files external/Diamonds.db",dbpassword = "SesameOpen")
b$build()
b<-f$dbFile("/Users/cnitz/Dev/R/rdao/db files external/Diamonds.db")
b$addCredentials(username = NULL,password = "SesameOpen")
b$addCredentials(username = "Admin",password = "SesameOpen")
c<-b$credentials
c$username
c$username<-"New name"
cnn<-b$build()
