self$builderProvider <- provider
private$.validator$makeReadonly("builderProvider")
invisible(self$print())
},
addCredentials = function(username = "",
password = "") {
private$.validator$makeReadwrite("credentials")
self$credentials <-Credentials$new(username = username, password = password)
private$.validator$makeReadonly("credentials")
invisible(self)
},
#actual implementation
build = function() {
prc <- "build()"
if (!private$.validator$isNullString(self$path)) {
if (!file.exists(self$path)) {
msg <- paste("Ungültiger Pfad", self$path)
private$.validator$throwError(msg, prc)
}
}
switch(
self$builderProvider,
msAccess = {
dbq <- paste0("DBQ=", self$path)
driver <-
"Driver={Microsoft Access Driver (*.mdb, *.accdb)};"
dbiDriver <- odbc::odbc
connectionstring <- paste0(driver, dbq)
return (msAccessConnection$new(provider = self$builderProvider,dbiDriver,connectionstring))
},
dbFile = {
dbiDriver <- RSQLite::SQLite
return (dbFileConnection$new(provider = self$builderProvider, dbiDriver,self$path))
},
dataFrame = {
dbiDriver <- RSQLite::SQLite
return (sqliteConnection$new(provider = self$builderProvider, ":memory:",dbiDriver))
},
mySql = {
msg <- paste("Noch nicht implementiert:", self$builderProvider)
private$.validator$throwError(msg, prc)
},
msSql = {
msg <- paste("Noch nicht implementiert:", self$builderProvider)
private$.validator$throwError(msg, prc)
},
{
msg <-
msg <- paste("Noch nicht implementiert:", self$builderProvider)
private$.validator$throwError(msg, prc)
}
)
},
print = function() {
msg <- paste("<", class(self)[1], ">", sep = "")
if (private$.validator$isCharacter(self$builderProvider) ) {
msg <-
paste(msg, " for provider: <", self$builderProvider, ">", sep = "")
}
cat(msg, " created", "\n", sep = "")
invisible(self)
}
)
)
#' SqlCommand
#' Führt Anweisungen, gespeicherte Prozeduren und Aktionsabfragen aus.
#' Dazu gehören unter anderem SELECT-,UPDATE- oder DELETE-Kommandos.
#'
#' @docType class
#' @importFrom R6 R6Class
#' @keywords data
#' @family sql
#'
#' @section Construction:
#' ```
#' xxxxxxxxxxxxxxxxxxxxxx
#' ```
#'
#' @return Object of \code{\link{R6Class}} xxxxxxxxxxxxxxxxxxxx (x)
#' @format \code{\link{R6Class}} object.
#' @examples
#' xxxxxxxxxxxxxxxxxxxxxx
#'
#'
#' @field x blabla.
#' @field y blabla.
#'
#' @section Methods:
#' \describe{
#'   \item{Documentation}{For full documentation of each method go to https://github.com/ChrisNice89/rdao}
#'   \item{\code{new()}}{xxx \code{Factory}.}
#'   \item{\code{xx(yy,yy="")}}{xx \code{zz}.}
#'   \item{\code{zz(yy,yy="")}}{xx \code{zz}.}}
#'
#' @include utils.R
#' @include sqlResult.R
#'
sqlCommand <- R6::R6Class(
classname = "Abstrakt SqlCommand",
inherit = NULL,
portable = TRUE,
private = list(
.validator = NULL,
.connection = NULL,
validator=function(){
return(private$.validator)
},
fetch  = function(disconnect = TRUE) {
self$type <- "fetch"
return(private$.connection$execute(self,disconnect))
},
execute = function(disconnect = TRUE) {
self$type <- "exec"
print("hier")
return(private$.connection$execute(self,disconnect))
},
executeBulk = function(df,disconnect=TRUE) {
self$type <- "bulk"
print(colnames(df))
return(private$.connection$execute(self,disconnect,df))
}
),
public = list(
provider = "",
type = "",
sql = "",
initialize = function(connection, sql) {
private$.validator <- Validator$new(self)
if (private$.validator$isTrustedConnection(connection)) {
private$.connection <- connection
self$provider <- private$.connection$provider
} else {
private$.validator$throwError("Connection ist ungültig", "initialize()")
}
if (private$.validator$isCharacter(sql)) {
self$sql <- sql
} else {
private$.validator$throwError("Sql statement ist ungültig", "initialize()")
}
private$.validator$makeReadonly("provider", "sql")
invisible(self$print("created"))
},
print = function(status="") {
msg <- paste("<", class(self)[1], ">", sep = "")
if (!private$.validator$isNullString(self$provider)) {
msg <-
paste(msg, " :: <", self$sql, ">", sep = "")
msg <-
paste(msg, paste("for provider: <", self$provider, ">",sep=""), sep = "\n")
}
cat(paste(msg, status), "\n", sep = " ")
invisible(self)
}
)
)
# Konkrete interface Klassen
# Ermöglicht das implementieren von "views" und "stored procedure" auf dem Frontend
sqlQuery <- R6::R6Class(
classname = "SqlCommand",
inherit = sqlCommand,
portable = TRUE,
public = list(
initialize = function(connection, sql) {
super$initialize(connection, sql)
invisible(self)
},
fetch  = function(disconnect = TRUE) {
return(super$fetch(disconnect))
},
execute = function(disconnect = TRUE) {
return(super$execute(disconnect))
}
)
)
sqlUpdateQuery <- R6::R6Class(
classname = "SqlCommand",
inherit = sqlCommand,
portable = TRUE,
private=list(
.df=NA
),
public = list(
initialize = function(connection, table,df) {
fields<-colnames(df)
params<-paste0(":",fields)
kvp<-paste(fields,params,sep="=")
# update.query <- paste0("UPDATE ",
#                   table,
#                   " SET ", paste(kvp,collapse = ","),
#                   " WHERE ",
#                   paste("ID", ":ID",sep = "="),";")
update.query <- paste0("UPDATE ",
table,
" SET ", paste(kvp,collapse = ","),";")
private$.df<-df
super$initialize(connection, update.query)
invisible(self)
},
execute = function(disconnect = TRUE) {
return(super$executeBulk(private$.df,disconnect))
}
)
)
# sqlInsertQuery <- R6::R6Class(
#   classname = "SqlCommand",
#   inherit = sqlCommand,
#   portable = TRUE,
#   public = list(
#     initialize = function(connection, table,id,field,value) {
#       # Build the INSERT/UPDATE query
#       updatequery <- paste0("INSERT INTO ",
#                             table,
#                             "(", paste(col_names$Field, collapse = ", "), ") ", # column names
#                             "VALUES",
#                             "('", paste(values, collapse = "', '"), "') ", # new records
#                             "ON DUPLICATE KEY UPDATE ",
#                             paste(col_names$Field[-pri], values[-pri], sep = " = '", collapse = "', "), # everything minus primary keys
#                             "';")
#
#       # Show full query for clarity
#       cat("Performing query", i, "of", nrow(x), ":\n", myquery, "\n\n")
#
#
#       super$initialize(connection, sql)
#       invisible(self)
#     },
#library(rdao)
f<-connectionFactory()
b<-f$dbFile("/Users/cnitz/Dev/R/rdao/db files external/test.db")
cnn<-b$build()
result<-cnn$createQuery(sql = "Select * FROM diamonds LIMIT 10")$fetch()
result$countRows()
result$getColor()
#' Aktuell wrapper um ein Dataframe aus einer Sql Abfrage
#' Könnte in der Zukunft um CRUD-Funktionalitäten erweitert werden.
#' Dataframe sollte komplett gekapselt werden um zb "AddColumn" zu verhindern.
#'
#'
#' @docType class
#' @importFrom R6 R6Class
#' @keywords data
#' @family sql
#'
#' @section Construction:
#' ```
#' xxxxxxxxxxxxxxxxxxxxxx
#' ```
#'
#' @return Object of \code{\link{R6Class}} xxxxxxxxxxxxxxxxxxxx (x)
#' @format \code{\link{R6Class}} object.
#' @examples
#' xxxxxxxxxxxxxxxxxxxxxx
#'
#'
#' @field x blabla.
#' @field y blabla.
#'
#' @section Methods:
#' \describe{
#'   \item{Documentation}{For full documentation of each method go to https://github.com/ChrisNice89/rdao}
#'   \item{\code{new()}}{xxx \code{Factory}.}
#'   \item{\code{xx(yy,yy="")}}{xx \code{zz}.}
#'   \item{\code{zz(yy,yy="")}}{xx \code{zz}.}}
#'
#' @include utils.R
#' @include sqlInterface.R
sqlResult<- R6::R6Class(
classname = "SqlResult",
inherit = generics,
portable = TRUE,
private = list(
.validator = NULL,
.connection=NULL,
.eod=FALSE,
.shared=NULL
),
public = list(
initialize = function(connection, data) {
private$.validator <- Validator$new(self)
if (private$.validator$isTrustedConnection(connection)) {
if (is.data.frame(data)) {
super$initialize(data)
private$.shared<-super$getPointer()
private$.connection <- connection
}else {
private$.validator$throwWarning("Kein Dataframe","initialize()")
}
}else{
private$.validator$throwError("Keine gültige Verbindung","initialize()")
}
},
getRecords=function(){
i<-private$.shared$index
return(private$.shared$df[i,])
},
countRows=function(){
return(nrow(private$.shared$df))
},
countColumns=function(){
return(ncol(private$.shared$df))
},
read=function(){
i<-private$.shared$index
on.exit(self$row(i+1))
return(!private$.eod)
},
row=function(i){
if(i>self$countRows()){
private$.eod<-TRUE
private$.shared$index<-1
}else{
private$.eod<-FALSE
private$.shared$index<-i
}
invisible(self)
},
toMatrix=function(){
functor <- function(obj) {
structure(
function(i=NA,j=NA) {
obj$matrixAccess(i,j)
},
class = "functor",
obj = obj
)
}
return(functor(super))
},
update=function(){
# querys<-list()
# for(i in 1:nrow(private$.shared$df)) {
#   querys[[i]]<-sqlUpdateQuery$new(private$.connection,table = "diamonds",df = private$.shared$df[i,])
#   cat(querys[[i]]$sql,"\n","\n")
# }
# first row 4 example
df <- private$.shared$df[1,]
qry<-sqlUpdateQuery$new(private$.connection,table = "diamonds",df = df)
print(qry$execute())
},
delete=function(rows){
private$.shared$df <- super$getPointer()$df[-rows, ]
invisible(self)
},
add=function(){
}
)
)
#library(rdao)
f<-connectionFactory()
b<-f$dbFile("/Users/cnitz/Dev/R/rdao/db files external/test.db")
cnn<-b$build()
result<-cnn$createQuery(sql = "Select * FROM diamonds LIMIT 10")$fetch()
result$countRows()
result$getColor()
View(`[[.functor`)
install.packages("jsonlite", repos="https://cran.rstudio.com/")
library("jsonlite")
json_file <- 'https://datahub.io/machine-learning/credit-approval/datapackage.json'
json_data <- fromJSON(paste(readLines(json_file), collapse=""))
# get list of all resources:
print(json_data$resources$name)
# print all tabular data(if exists any)
for(i in 1:length(json_data$resources$datahub$type)){
if(json_data$resources$datahub$type[i]=='derived/csv'){
path_to_file = json_data$resources$path[i]
data <- read.csv(url(path_to_file))
print(data)
}
}
View(data)
dbWriteTable(cnn, "diamonds",  df)
# helper
installer <- function(pkg){
new.pkg <- pkg[!(pkg %in% installed.packages()[, "Package"])]
if (length(new.pkg))
install.packages(new.pkg, dependencies = TRUE)
sapply(pkg, require, character.only = TRUE)
}
packages<- c("devtools", "roxygen2","R6","rmarkdown","pryr","DBI")
installer(packages)
library(roxygen2)
setwd("~/Dev/R/rdao")
document()
#
# # vignettes
# devtools::install_github("hadley/pkgdown")
library(pkgdown)
build_site()
# #build vignette
# use_vignette("Test")
rmarkdown::render("vignettes/Test.Rmd",output_file = "Test.html",output_dir = "docs/articles")
rdao::diamonds
remove.packages("rdao")
devtools::install_github("Chrisnice89/rdao")
library(rdao)
f<-connectionFactory()
b<-f$dbFile("/Users/cnitz/Dev/R/rdao/db files external/Diamonds.db")
cnn<-b$build()
cnn$isConnected()
qry<-cnn$createQuery(sql = "Select * FROM diamonds")
result<-qry$execute()
result<-cnn$createCommand(sql = "Select * FROM diamonds")
cnn$isConnected()
f<-factory()
b<-f$msAccess(path = "/Users/cnitz/Dev/R/rdao/db files external/Diamonds.db",dbpassword = "SesameOpen")
b$build()
b<-f$dbFile("/Users/cnitz/Dev/R/rdao/db files external/Diamonds.db")
b$addCredentials(username = NULL,password = "SesameOpen")
b$addCredentials(username = "Admin",password = "SesameOpen")
c<-b$credentials
c$username
c$username<-"New name"
f<-connectionFactory()
b<-f$dbFile("/Users/cnitz/Dev/R/rdao/db files external/Diamonds.db")
cnn<-b$build()
cmd<-cnn$createQuery(sql = "Select * FROM diamonds")
result<-cmd$fetch()
getOption("devtools.name")
# create database
df<- as.data.frame(rdao::diamonds,row.names = NULL)
# add autoincrement field "ID" to the front
df <- data.frame(ID = seq.int(nrow(df)), df)
cnn <- dbConnect(RSQLite::SQLite(),"test.db")
dbListTables(cnn)
dbWriteTable(cnn, "diamonds",  df)
dbListTables(cnn)
# Fetch all query results into a data frame:
df<- dbGetQuery(cnn, 'SELECT * FROM diamonds')
rs <- dbSendQuery(cnn, 'SELECT * FROM diamonds')
while (!dbHasCompleted(rs)) {
df <- dbFetch(rs, n = 10)
print(df)
}
dbClearResult(rs)
dbDisconnect(cnn)
dbDisconnect(cnn)
dbWriteTable(cnn, "diamonds",  df)
dbDisconnect(cnn)
rows<-paste(as.vector(df[,1]))
rows
hm<-HashMap$new("rows")
hm$put(key = rows,value = as.vector(df[,1]))
hm$get("1000")
l
# helper
installer <- function(pkg){
new.pkg <- pkg[!(pkg %in% installed.packages()[, "Package"])]
if (length(new.pkg))
install.packages(new.pkg, dependencies = TRUE)
sapply(pkg, require, character.only = TRUE)
}
packages<- c("devtools", "roxygen2","R6","rmarkdown","pryr","DBI")
installer(packages)
devtools::install_github("Chrisnice89/rdao")
library(rdao)
f<-connectionFactory()
b<-f$dbFile("/Users/cnitz/Dev/R/rdao/db files external/Diamonds.db")
cnn<-b$build()
cnn$isConnected()
qry<-cnn$createQuery(sql = "Select * FROM diamonds")
result<-qry$execute()
result<-cnn$createCommand(sql = "Select * FROM diamonds")
cnn$isConnected()
f<-factory()
b<-f$msAccess(path = "/Users/cnitz/Dev/R/rdao/db files external/Diamonds.db",dbpassword = "SesameOpen")
b$build()
b<-f$dbFile("/Users/cnitz/Dev/R/rdao/db files external/Diamonds.db")
b$addCredentials(username = NULL,password = "SesameOpen")
b$addCredentials(username = "Admin",password = "SesameOpen")
c<-b$credentials
c$username
c$username<-"New name"
f<-connectionFactory()
b<-f$dbFile("/Users/cnitz/Dev/R/rdao/db files external/Diamonds.db")
cnn<-b$build()
cmd<-cnn$createQuery(sql = "Select * FROM diamonds")
result<-cmd$fetch()
getOption("devtools.name")
# create database
df<- as.data.frame(rdao::diamonds,row.names = NULL)
# add autoincrement field "ID" to the front
df <- data.frame(ID = seq.int(nrow(df)), df)
cnn <- dbConnect(RSQLite::SQLite(),"test.db")
dbListTables(cnn)
dbWriteTable(cnn, "diamonds",  df)
dbListTables(cnn)
# Fetch all query results into a data frame:
df<- dbGetQuery(cnn, 'SELECT * FROM diamonds')
rs <- dbSendQuery(cnn, 'SELECT * FROM diamonds')
while (!dbHasCompleted(rs)) {
df <- dbFetch(rs, n = 10)
print(df)
}
dbClearResult(rs)
dbDisconnect(cnn)
dbDisconnect(cnn)
dbWriteTable(cnn, "diamonds",  df)
dbDisconnect(cnn)
rows<-paste(as.vector(df[,1]))
rows
hm<-HashMap$new("rows")
hm$put(key = rows,value = as.vector(df[,1]))
hm$get("1000")
l
View(data)
View(data)
View(json_data)
View(json_data)
View(data)
View(data)
View(cnn)
View(cnn)
